%% reads ACSII output from RBR and converts% writes it to RDB file % So far the input format contain (temp,cond,day,month,yeat,time)  %  % input: %   outfile  : path and name of RODB outputfile%   infile   : path and name of RBR   ASCII input file%   infofile : path and name of mooring info.dat file  %   graphics : 'y' = display some graphics    %%  uses: microcat_month2.m, hms2h.m, folge.m  (all by T.Kanzow) %        nearest.m (author unknown)%% kanzow  20/04/2005cruise        = 'd334' data_type     = 'cal_dip';  % 'moored'/'cal_dip' %%data_type     = 'moored';  % 'moored'/'cal_dip' %%mooring       = ['eb2_7_200721'];       % mooring       = ['cast6'];       % % ------- data paths --------------------------%% inpath   = ['/local/users/pstar/data/moor/raw/rbr/'];%% outpath  = ['/local/users/pstar/data/moor/proc/',moor,'/rbr/'];%% infofile = ['/local/users/pstar/data/moor/proc/',moor,'/',moor,'info.dat']; inpath        = ['~/Data/rpdmoc/rapid/data/moor/raw/d334/rbr/']; outpath       = ['~/Data/rpdmoc/rapid/data/moor/proc/',mooring,'/rbr/']; infofile      = ['~/Data/rpdmoc/rapid/data/moor/proc/',mooring,'/',mooring,'info.dat']; incalpath     = '/local/users/pstar/Data/rpdmoc/rapid/data/moor/raw/d334/rbr_cal_dip/'; outcalpath    = ['/local/users/pstar/Data/rpdmoc/rapid/data/moor/proc_calib/d334/cal_dip/rbr/',mooring,'/']; infocalfile   = ['/local/users/pstar/Data/rpdmoc/rapid/data/moor/proc_calib/d334/cal_dip/',mooring,'info.dat'];  operator      = 'Malte'; rbr_code      = 330; if strcmp(data_type,'cal_dip')   inpath      = incalpath;   outpath     = outcalpath;   infofile    = infocalfile;     end Instrument  = 'RBR';      % Instr. info for rodb header   % check if infile and infofile exist if exist(infofile) ~= 2   disp(['infofile:  ',infofile,' does not exist'])   keyboard end [lat,lon,wd,sdate,stime,edate,etime,z,type,serial]=rodbload(infofile,...     'Latitude:Longitude:WaterDepth:Start_Date:Start_Time:End_Date:End_Time:z:instrument:serialnumber');% ------load mooring info ------------------ rbrI          = find(type==rbr_code); sn            = serial(rbrI); logfile       = [outpath,'stage1_log']; log           = fopen(logfile,'w'); fprintf(log,['Processing of RBRs  from mooring %s \n Date: %s \n'],...              mooring,datestr(clock)'); fprintf(log,'Operator: %s\n',operator'); for ins = 1 : length(rbrI)   serialnumber = sn(ins);   instrdepth   = z(ins);   if strcmp(data_type,'moored')     infile   = [inpath,sprintf('%6.6d',serialnumber),'_data.dat'];   elseif strcmp(data_type,'cal_dip')     infile   = [inpath,sprintf('%4.4d',serialnumber),'_cal_dip_data.dat'];   else     disp('data type does not exist! Break.')   end   outfile    = [outpath,mooring,'_',sprintf('%4.4d',serialnumber),'.raw'];   if exist(infile) ~= 2      disp(['infile:  ',infile,' does not exist'])      break   end   if exist(outfile) == 2      disp(['oufile:  ',outfile,' alredy exists!!'])      overwrite =  input('Overwrite y/n  ','s');       if overwrite ~='y'        disp('data conversion stop')        break      end   end   %---------------------------------------------------------   % open input file, read data into string   %--------------------------------------------------------    fid1 = fopen(infile,'r');   if fid1 == -1      disp(['unable to open infile:  ',infile])      return   end    zeile = fscanf(fid1,'%c');  %read data into string   ret = sprintf('\n');   retx = findstr(zeile,ret);  % car. return indices   % ----- get times ------------------------    index        = findstr(zeile,'Logging start'); %Logger start   str_end      = find(retx>index);   start        = zeile(index+13:retx(str_end(1)));   index        = find(start==':' | start=='/');   start(index) = ' ';   start        = str2num(start);   start        = julian([start(1)+2000 start(2:3) hms2h(start(4:6))]);   index        = findstr(zeile,'Logging end'); % Logger end   str_end      = find(retx>index);   stop         = zeile(index+13:retx(str_end(1)));     index        = find(stop==':' | stop=='/');   stop(index)  = ' ';   stop         = str2num(stop);   stop         = julian([stop(1)+2000 stop(2:3) hms2h(stop(4:6))]);   index        = findstr(zeile,'Sample period'); %sampling rate   str_end      = find(retx > index);   sr           = zeile(index+13 : retx(str_end(1))-1);   index        = find(sr ~= ' ');   sr           = sr(index);   index        = find(sr==':' | sr=='/');   sr(index)    = ' ';   sr           = hms2h(str2num(sr))/24;  % -------- Convert data string  to numbers -------------   markt = findstr(zeile,'Temp ');   markc = findstr(zeile,'Cond ');   markp = findstr(zeile,'Pres ');   [col,colI] = sort([markt markc markp]);    beg  = find(retx > markt);   beg  = retx(beg(1))+1;   data = str2num(zeile(beg:end));   sz   = size(data);     jd   = start : sr : start+sr*(sz(1)-1);   T    = data(:,colI(:,1));   C    = data(:,colI(:,2));   P    = data(:,colI(:,3));   TIME = gregorian(jd);   TIME = [TIME(:,1:3) hms2h(TIME(:,4:6))];  % --------  check time --------------------                                             %  ex_samples = (stop-start) / sr;    %  if jd(end) ~= stop    %fprintf(1,['Mismatch between expected and actual number '...   %            'of samples by %d scans\n')    %  end  % ----------- save data ------------------   cols = 'YY:MM:DD:HH:P:T:C'; % column info for rodb header   fort = '%4.4d  %2.2d  %2.2d  %7.5f  %6.1f  %6.4f  %6.4f'; % output format  rodbsave(outfile,...  'Latitude:Longitude:Columns:Start_Date:Start_Time:serialnumber:Mooring:WaterDepth:z:End_Date:End_Time',...    fort,...    lat,lon,cols,sdate,stime,serialnumber,mooring,wd,instrdepth,edate,etime,...         [TIME P T C]);% -------- info file entries ------------  fprintf(log,'Serial number: %4.4d\n',serialnumber);  fprintf(log,'Target Depth [m]: %4.4d\n',instrdepth);  fprintf(log,'Input file: %s\n',infile);  fprintf(log,'Output file: %s\n',outfile);  fprintf(log,'Median Pressure [dbar]: %5.1f\n',median(P));  fprintf(log,'Median Temperature [deg C]: %5.1f\n',median(T));  fprintf(log,'Median Conductivity [mS/cm]: %5.1f\n',median(C));   fprintf(log,'Start date and time: %s \n',datestr(gregorian(jd(1))));   fprintf(log,'End date and time:   %s \n',datestr(gregorian(jd(end))));   sampling_rate = round(1./median(diff(jd)));   fprintf(log,'Sampling Frequency [per day]: %d \n',sampling_rate); %  fprintf(log,'Number of samples: %d; expected: %d \n\n\n',sz(1),ex_samples);   fprintf(log,'Number of samples: %d ',sz(1))% ---- Graphics -------------------------        figure(10);clf  dl = length(jd);   subplot(3,1,1)  hold off  plot(jd-jd(1),P)     set(gca,'Ygrid','on')     set(gca,'Xgrid','on')  ylabel('Pressure [dbar]')  mp = nanmean(P);  %set(gca,'ylim',[mt-.5 mt+.5 ])  %set(gca,'xlim',[jd(1) jd(dl) ]-jd(1))   subplot(3,1,2)  hold off  plot(jd-jd(1),T)     set(gca,'Ygrid','on')     set(gca,'Xgrid','on')  ylabel('Temperature [deg C]')  mt = nanmean(T);  %set(gca,'ylim',[mt-.5 mt+.5 ])  %set(gca,'xlim',[jd(1) jd(dl) ]-jd(1))  subplot(3,1,3)  hold off  plot(jd-jd(1),C)     set(gca,'Ygrid','on')     set(gca,'Xgrid','on')  ylabel('Cond. [S/m]')  xlabel('Time [days]')  mc = nanmean(C);  %set(gca,'ylim',[mt-.03 mt+.03])  %set(gca,'xlim',[jd(1) jd(dl) ]-jd(1))    subplot(3,1,1)  title(outfile)  eval(['print -dps ',outfile,'.ps']) end  % end ins