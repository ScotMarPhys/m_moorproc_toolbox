% PIES2RODB is a script that performs stage1 processing on PIES% data.  It converts raw ascii data as downloaded from the PIES to% rodb format, for all data streams (pressure, travel time, and% engineering).%% It calls rodbload.m, rodbsave.m, gregorian.m, julian.m, hms2h.m% 16.04.05 Kanzow% 22 April 2005 jym: Start with clean slate% 02.11.08 Szuts: converted to load pies data, based on%   seagauge2rdb.m and microcat2rodb_2_002.m% 29.03.10 Szuts: add a header and clean up a bit% May 2014. DR added correction for data format of PIES 131 which has an% extra field in P file header which I believe to be the Bliley reference% oscisllator serial number. Think this was added with new firmware.clear allclose allmore off% -----------------------------------------------------------------% --- This is the information that needs to be modified for -------% --- different users, directory trees, and moorings --------------% -----------------------------------------------------------------cruise    = 'jc103';%mooring   = 'ebp2_1_200565'; mooring = 'ebp2_2_201111';operator  = 'dr400';raw_dir_ext= 'EBP2';if exist('/Volumes/rpdmoc/rapid/data/exec/jc103/stage1/microcat/mc_call_caldip_jc103_v3.m','file')    % using DR Mac with mount to banba on JC103    basedir = '/Volumes/rpdmoc/rapid/data/';else    basedir = '/local/users/pstar/rpdmoc/rapid/data/';end% -----------------------------------------------------------------% --- set paths for data input and output ---% NB The seagauge dir in outpath must be created firstinpath     = [basedir 'moor/raw/jc103/pies/' raw_dir_ext '/'];outpath    = [basedir 'moor/proc/' mooring '/pies/'];infofile   = [basedir 'moor/proc/' mooring '/' mooring 'info.dat'];offsetfile = [basedir 'moor/raw/jc103/clock_offset.dat'];% ZB Szuts, 27.03.10, oc459% There are 2 clock offset files for BPR instruments:% clock_offset.dat (in raw/oc459/) and BPR_clock_offset.dat in% (raw/oc459/seagauge/):% - clock_offset.dat corrects for constant day/year offsets that% arise from incorrect instrument setup at the beginning of the% record.% - bpr_clock_offset.dat corrects for smaller offsets measured upon% recovery in stage2 processing, and are applied as linear trends% for the whole record.pies_code    = 316;  % Instrument codetoffset      = 0;  % time offset% --- get mooring information from infofile ---[lat,lon,wd,sdate,stime,edate,etime,z,type,serial]= ...    rodbload(infofile,...             ['Latitude:Longitude:WaterDepth:StartDate:StartTime:'...              'EndDate:EndTime:z:instrument:serialnumber']);% --- find the pies on the mooring ---piesI        = find(type==pies_code);sn           = serial(piesI);% --- write header info to log file ---logfile = [outpath 'stage1_log'];fidlog  = fopen(logfile,'w+');  % If it doesn't exist, create itfprintf(fidlog,'Processing of PIES from mooring %s \n',mooring);fprintf(fidlog,'Transformation of ascii data to rodb format \n');fprintf(fidlog,'Processing carried out by %s at %s\n\n\n',operator,datestr(clock));fprintf(fidlog,'Latitude  %6.3f \n',lat);fprintf(fidlog,'Longitude %6.3f \n',lon);% --- setup infiles and outfile, and check for their existence ---infilett   = [inpath 'T' sprintf('%3.3d',sn) '_1.DAT']; % Travel Time data infilepres = [inpath 'P' sprintf('%3.3d',sn) '_1.DAT']; % pressure datainfileeng  = [inpath 'E' sprintf('%3.3d',sn) '_1.DAT']; % engineering dataoutfile    = [outpath mooring '_' sprintf('%3.3d',sn) '.raw'];if exist(infilett,'file') ~= 2   disp(['travel time infile:  ',infilett,' does not exist'])   returnendif exist(infilepres,'file') ~= 2   disp(['pressure infile:  ',infilepres,' does not exist'])   returnendif exist(infileeng,'file') ~= 2   disp(['engineering infile:  ',infilepres,' does not exist'])   returnendif exist(outfile,'file') == 2  disp(['outfile:  ',outfile,' already exists!!'])  overwrite =  input('Overwrite y/n  ','s');  if overwrite ~='y'    disp('data conversion stop')    return  endend%---------------------------------------------------------% TRAVEL TIME INFILE%-------------------------------------------------------- %---------------------------------------------------------% open infile, read data into string%-------------------------------------------------------- SerialNumber=[]; Start_Time=[]; Start_Date=[];fprintf(fidlog,'travel time infile: %s\n',infilett);fprintf(fidlog,'outfile: %s\n',outfile);fidtt = fopen(infilett,'r');if fidtt == -1   disp(['unable to open travel time infile:  ',infilett])   returnelse  disp(['loading ',infilett]);end zeile = fscanf(fidtt,'%c');  % read data into stringfclose(fidtt); % close file ret = sprintf('\n');retx = findstr(zeile,ret);  % car. return indicesif length(retx)< 3  disp('travel time input file does not contain data ')  fprintf(fidlog,'travel time input file does not contain data \n')    returnend%---------------------------------------------------------% convert to character matrix%-------------------------------------------------------- if retx(1)==1 % skip first blank line  j=1;else  junk{1} = deal(zeile(1:retx(1)-1));  j=2;endfor i=2:length(retx)  junk{j} = deal(zeile(retx(i-1)+1:retx(i)-1));  j=j+1;endjunk{j} = deal(zeile(retx(i)+1:end));zeile = strvcat(junk);%---------------------------------------------------------% find meta-data record, serial number inheader%-------------------------------------------------------- imd = strmatch('T ',zeile); % find start of TT meta-dataif ~isempty(imd)  [junk,out] = strtok(zeile(imd,:));  % meta-data date    [meta_date_tt,out] = strtok(out);  % meta-data time  [meta_time_tt,out] = strtok(out);  % PIES serial number  [meta_sn_tt,out] = strtok(out); meta_sn_tt = str2num(meta_sn_tt);  % travel time burst measurement interval (in minutes)  [meta_ttinterval] = strtok(out); meta_ttinterval = str2num(meta_ttinterval);  SerialNumber = meta_sn_tt;     else    disp('unable to find meta-data in travel time infile\n\n')    disp(['travel time infile:  ' infilett ' is not in the expected format'])    fprintf(fidlog,'travel time infile is not in the expected format\n')endfprintf(fidlog,'serial number: %d\n',SerialNumber);%---------------------------------------------------------------% get missing header variables from info.dat file%---------------------------------------------------------------infovar = ['Mooring:Latitude:Longitude:Waterdepth:id:sn:z:'...           'StartDate:StartTime:EndDate:EndTime']; [mo,la,lo,wd,id,sn,z,sdate,stime,edate,etime]=rodbload(infofile,infovar); if isempty(id) | isnan(id)  infovar =['Mooring:Latitude:Longitude:Waterdepth:instrument:serialnumber:z:'...            'StartDate:StartTime:EndDate:EndTime'];   [mo,la,lo,wd,id,sn,z,sdate,stime,edate,etime]=rodbload(infofile,infovar); endif iscell(mo)  mo = deal(mo{:}); % convert cell arrayendii = find(SerialNumber == sn);z  = z(ii);         % instrument depth%-------------------------------------------% get data %-------------------------------------------jjlast=0;i=imd+1;imessages = round( size(zeile,1)*[1:10]/10 );nans = repmat(nan,[1 size(zeile,1)-imd]);hourtt = nans;tt1 = nans;tt2 = nans;tt3 = nans;tt4 = nans;while i <= size(zeile,1)  jj = [jjlast+1 : jjlast+6];  out = strread(deblank(zeile(i,:)));  if length(out)~=25    warning('there are not the expected 25 numbers on this line')    keyboard  end  % there are up to 6 measurements per hour (per line)  % the number of hours elapsed since 1970/01/01 00:00  hourtt(jj) = out(1) + [0:1:5]/6;  % travel time measurements, in bursts of 4 (tt1-tt4) 6 times per  % hour, in units of 10 micro-seconds  tt1(jj) = out(2:4:end);  tt2(jj) = out(3:4:end);  tt3(jj) = out(4:4:end);  tt4(jj) = out(5:4:end);  jjlast = max(jj);  i = i + 1;  if any(imessages - i == 0)     disp(['... ' num2str(i/size(zeile,1)*100,'%2d') '% completed ...'])  endendntt = length(hourtt);if length(tt1)~=ntt | length(tt2)~=ntt | length(tt3)~=ntt | length(tt4)~=ntt  disp('hourtt and tt1, tt2, tt3, tt4 are not the same lengths')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,'hourtt and tt1, tt2, tt3, tt4 are not the same lengths\n')  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')endif length(find(tt1==0)) >= ntt/6 | ...      length(find(tt2==0)) >= ntt/6 | ...      length(find(tt3==0)) >= ntt/6 | ...      length(find(tt4==0)) >= ntt/6  disp('the interval between travel time burst measurements is not 10 min\n')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,'the interval between travel time burst measurements is not 10 min\n')  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')end%---------------------------------------------------------% PRESSURE INFILE%-------------------------------------------------------- %---------------------------------------------------------% open infile, read data into string%-------------------------------------------------------- fprintf(fidlog,'pressure infile: %s\n',infilepres);fidp = fopen(infilepres,'r');if fidp == -1   disp(['unable to open pressure infile:  ',infilepres])   returnelse  disp(['loading ',infilepres]);end zeile = fscanf(fidp,'%c');  %read data into stringfclose(fidp); %close file ret = sprintf('\n');retx = findstr(zeile,ret);  % car. return indicesif length(retx)< 3  disp('pressure input file does not contain data ')  fprintf(fidlog,'pressure input file does not contain data \n')    returnend%---------------------------------------------------------% convert to character matrix%-------------------------------------------------------- junk=[];if retx(1)==1 % skip first blank line  j=1;else  junk{1} = deal(zeile(1:retx(1)-1))  j=2;endfor i=2:length(retx)  junk{j} = deal(zeile(retx(i-1)+1:retx(i)-1));  j=j+1;endjunk{j} = deal(zeile(retx(i)+1:end));zeile = strvcat(junk);%---------------------------------------------------------% find meta-data record, serial number inheader%-------------------------------------------------------- imd = strmatch('P ',zeile); % find start of pressure meta-dataif ~isempty(imd)  [junk,out] = strtok(zeile(imd,:));  % meta-data date    [meta_date_p,out] = strtok(out);  % meta-data time  [meta_time_p,out] = strtok(out);  % PIES serial number  [meta_sn_p,out] = strtok(out); meta_sn_p = str2num(meta_sn_p);  % PAROS pressure sensor serial number  [meta_paros_sn,out] = strtok(out); meta_paros_sn = str2num(meta_paros_sn);  % Pressure and Temperature measurement interval (in minutes)  [meta_PTint,out] = strtok(out); meta_PTint = str2num(meta_PTint);  % PAROS coefficients  numpc = length( strread(deblank(fliplr(deblank(out(end:-1:1))))) );  if (numpc~=16 & meta_paros_sn ~=131)    disp(['expected 16 PAROS coefficients, but ' ...          num2str(length(strread(deblank(out)))) ' were returned'])    fprintf(fidlog,['expected 16 PAROS coefficients, but ' ...                    num2str(length(strread(deblank(out)))) ' were returned\n']);  elseif (numpc~=17 & meta_paros_sn ==131)      disp(['expected 16 PAROS coefficients, and Bliley sensor SN, but ' ...          num2str(length(out)) ' were returned'])    fprintf(fidlog,['expected 16 PAROS coefficients, and Bliley sensor SN, but ' ...                    num2str(length(strread(deblank(out)))) ' were returned\n']);  end    a=strread(deblank(out));  if length(a)==16    [meta_pc_U0,meta_pc_Y1,meta_pc_Y2,meta_pc_Y3,...    meta_pc_C1,meta_pc_C2,meta_pc_C3,meta_pc_D1,meta_pc_D2,...    meta_pc_T1,meta_pc_T2,meta_pc_T3,meta_pc_T4,meta_pc_T5,...    meta_pc_Tzero,meta_pc_Pzero] = strread(deblank(out));  elseif length(a)==17    [meta_pc_U0,meta_pc_Y1,meta_pc_Y2,meta_pc_Y3,...    meta_pc_C1,meta_pc_C2,meta_pc_C3,meta_pc_D1,meta_pc_D2,...    meta_pc_T1,meta_pc_T2,meta_pc_T3,meta_pc_T4,meta_pc_T5,...    meta_pc_Tzero,meta_pc_Pzero,meta_sn_Bliley] = strread(deblank(out));  end   if strcmp(meta_sn_p,SerialNumber)    disp('infilett and infilep serial numbers do not agree')    fprintf(fidlog,'infilett and infilep serial numbers do not agree\n')  end     else    disp('unable to find meta-data in pressure infile\n\n')    disp(['pressure infile:  ' infilep ' is not in the expected format'])    fprintf(fidlog,'pressure infile is not in the expected format\n')end%-------------------------------------------% get data %-------------------------------------------disp('pressure data is being loaded into matlab ...')jjlast=0;i=imd+1;imessages = round( size(zeile,1)*[1:10]/10 );nans = repmat(nan,[1 size(zeile,1)-imd]);hourp = nans;pres = nans;temp = nans;while i <= size(zeile,1)  jj = [jjlast+1 : jjlast+6];  out = strread(deblank(zeile(i,:)));  if length(out)~=13    warning('there are not the expected 13 numbers on this line')    keyboard  end  % there are up to 6 temp/pres measurements per hour (per line)  % the number of hours elapsed since 1970/01/01 00:00  hourp(jj) = out(1) + [0:1:5]/6;  % pressure measurement, in units of 10 Pa (0.1 millibar)  pres(jj) = out(2:2:end);  % temperature measurement, in units of 1e-3 degree C  temp(jj) = out(3:2:end);  jjlast = max(jj);  i = i + 1;  if any(imessages - i == 0)     disp(['... ' num2str(i/size(zeile,1)*100,'%2d') '% completed ...'])  endendnp = length(hourp);if length(pres)~=np | length(temp)~=np  disp('hourp and pres, temp are not the same lengths')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,'hourp and pres, temp are not the same lengths\n')  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')endif length(find(pres==0)) >= np/6 | ...      length(find(temp==0)) >= np/6  disp('the interval between pres/temp measurements is not 10 min\n')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,'the interval between pres/temp measurements is not 10 min\n')  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')endntt = length(hourtt);np = length(hourp);if ntt~=np  disp('the number of travel time and pressure measurements do not match')  fprintf(fidlog,'the number of travel time and pressure measurements do not match\n')end%---------------------------------------------------------% ENGINEERING INFILE%-------------------------------------------------------- %---------------------------------------------------------% open infile, read data into string%-------------------------------------------------------- fprintf(fidlog,'engineering infile: %s\n',infileeng);fide = fopen(infileeng,'r');if fidp == -1   disp(['unable to open engineering infile:  ',infileeng])   returnelse  disp(['loading ',infileeng]);end zeile = fscanf(fide,'%c');  %read data into stringfclose(fide); %close file ret = sprintf('\n');retx = findstr(zeile,ret);  % car. return indicesif length(retx)< 3  disp('engineering input file does not contain data ')  fprintf(fidlog,'engineering input file does not contain data \n')    returnend%---------------------------------------------------------% convert to character matrix%-------------------------------------------------------- junk=[];if retx(1)==1 % skip first blank line  j=1;else  junk{1} = deal(zeile(1:retx(1)-1))  j=2;endfor i=2:length(retx)  junk{j} = deal(zeile(retx(i-1)+1:retx(i)-1));  j=j+1;endjunk{j} = deal(zeile(retx(i)+1:end));zeile = strvcat(junk);%---------------------------------------------------------% find meta-data record, serial number inheader%-------------------------------------------------------- imd = strmatch('E ',zeile); % find start of pressure meta-dataif ~isempty(imd)  [junk,out] = strtok(zeile(imd,:));  % meta-data date    [meta_date_e,out] = strtok(out);  % meta-data time  [meta_time_e,out] = strtok(out);  % PIES serial number  [meta_sn_e] = strtok(out); meta_sn_e = str2num(meta_sn_e);   if strcmp(meta_sn_e,SerialNumber)    disp('infilett and infileeng serial numbers do not agree')    fprintf(fidlog,'infilett and infileeng serial numbers do not agree\n')  end     else    disp('unable to find meta-data in engineering infile\n\n')    disp(['engineering infile:  ' infileeng ' is not in the expected format'])    fprintf(fidlog,'engineering infile is not in the expected format\n')end%-------------------------------------------% get data %-------------------------------------------disp('engineering data is being loaded into matlab ...')jjlast=0;i=imd+1;imessages = round( size(zeile,1)*[1:10]/10 );nans = repmat(nan,[1 size(zeile,1)-imd]);houre = nans;Irel = nans;Isys = nans;Vrel = nans;Vsys = nans;while i <= size(zeile,1)  jj = jjlast + 1;  out = strread(deblank(zeile(i,:)));  if length(out)~=14    warning('there are not the expected 14 numbers on this line')    keyboard  end  % engineering data is stored every 24 hours, one record per line  % the number of hours elapsed since 1970/01/01 00:00  % the engineering data is recorded just after 23:50:00 every day,  % but the hour stamp is at 23:00:00 --> add 1 hour to bring the  % time to midnight (the closest multiple of 10 minutes) and to  % align with the sampling of scientitific variables  houre(jj) = out(1) + 1;   % release battery current drain, in milliAmperes  Irel(jj) = out(3);  % rsystem battery current drain, in milliAmperes  Isys(jj) = out(4);  % release battery voltage, in Volts  Vrel(jj) = out(5);  % system battery voltage, in Volts  Vsys(jj) = out(6);  % don't save the remaining engineering parameters - see the IES  % manual for details  jjlast = jj;  i = i + 1;  if any(imessages - i == 0)     disp(['... ' num2str(i/size(zeile,1)*100,'%2.0f') '% completed ...'])  endendne = length(houre);if length(Irel)~=ne | length(Isys)~=ne | length(Vrel)~=ne | length(Vsys)~=ne   disp('houre and Irel, Isys, Vrel, Vsys are not the same lengths')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,'houre and Irel, Isys, Vrel, Vsys are not the same lengths\n')  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')end%---------------------------------------------------------% COMBINE DATA %-------------------------------------------------------- %---------------------------------------------------------% verify that time strings are consistent, fill gaps, etc%-------------------------------------------------------- % hourtt and hourp are the number of hours elapsed since 1970/01/01 00:00jdtt = hourtt/24 + julian(1970,1,1,0);jdp  = hourp/24  + julian(1970,1,1,0);jd_s = julian(sdate(1),sdate(2),sdate(3),stime(1)+stime(2)/60);jd_e = julian(edate(1),edate(2),edate(3),etime(1)+etime(2)/60);if jdtt(1) ~= jdp(1)  disp(['the time of the first data entries for travel time and ' ...        'pressure do not match'])  fprintf(fidlog,['the time of the first data entries for travel time and ' ...          'pressure do not match\n'])endif jdtt(end) ~= jdp(end)  disp(['the time of the last data entries for travel time and ' ...        'pressure do not match'])  fprintf(fidlog,['the time of the last data entries for travel time and ' ...          'pressure do not match\n'])end% find gaps in time variable and make time variable continuous,% inserting the dummy value into scientific variablesjd = jdtt;dt = 1/24/6; % time increments in 10 minute intervalsdummyin = 999999;iigap = find(diff(jdtt)*24*60 > 11);if any(iigap==1) | any(iigap==length(jdtt)-1)  disp('there''s a skip in hourtt that occurs at the first or last data point')  disp('-- pies2rodb does not yet treat this case')  fprintf(fidlog,['there''s a skip in hourtt that occurs at '...                  'the first or last data point\n'])  fprintf(fidlog,'-- pies2rodb does not yet treat this case\n')endjd_add=[];while length(iigap)  jd_add = [ jd_add jdtt(iigap(1))+dt : dt : jdtt(iigap(1)+1)-dt ];  iigap(1)=[];endjd = [ jd jd_add ];[jd,iii] = sort(jd);dummys = repmat(dummyin,size(jd_add));tt1 = [tt1 dummys];  tt1 = tt1(iii);tt2 = [tt2 dummys];  tt2 = tt2(iii);tt3 = [tt3 dummys];  tt3 = tt3(iii);tt4 = [tt4 dummys];  tt4 = tt4(iii);pres = [pres dummys];  pres = pres(iii);temp = [temp dummys];  temp = temp(iii);%---------------------------------------------------------% remove bad starting and ending data%-------------------------------------------------------- % for travel time: values of 0 indicate no measurement was logged, and% values of 999999 indicate no echo was heard (value of 999999)% for pres/temp: values of 0 indicate no measurement was loggedttbad = [0 999999];while any(tt1(1)==ttbad) & any(tt2(1)==ttbad) & ...      any(tt3(1)==ttbad) & any(tt4(1)==ttbad) & ...      pres(1)==0 & temp(1)==0  hourtt(1)=[];  tt1(1)=[];   tt2(1)=[];  tt3(1)=[];  tt4(1)=[];  hourp(1)=[];  pres(1)=[];  temp(1)=[];  jd(1)=[];endwhile any(tt1(end)==ttbad) & any(tt2(end)==ttbad) & ...      any(tt3(end)==ttbad) & any(tt4(end)==ttbad) & ...      pres(end)==0 & temp(end)==0  hourtt(end)=[];  tt1(end)=[];   tt2(end)=[];  tt3(end)=[];  tt4(end)=[];  hourp(end)=[];  pres(end)=[];  temp(end)=[];  jd(end)=[];end%---------------------------------------------------------% convert to standard units, keeping dummy values%-------------------------------------------------------- % find dummy values before convertingdummyin = 999999;dummyout = -999;ii1 = find(tt1==dummyin);ii2 = find(tt2==dummyin);ii3 = find(tt3==dummyin);ii4 = find(tt4==dummyin);iip = find(pres==dummyin);iit = find(temp==dummyin);% convert to standard unitstt1 = tt1*1e-5; % convert to secondstt2 = tt2*1e-5; % convert to secondstt3 = tt3*1e-5; % convert to secondstt4 = tt4*1e-5; % convert to secondspres = pres*1e-3; % convert to decibarstemp = temp*1e-3; % convert to degrees CIrel = Irel*1e-3; % convert to AmperesIsys = Isys*1e-3; % convert to Amperes% replace dummiestt1(ii1) = dummyout;tt2(ii2) = dummyout;tt3(ii3) = dummyout;tt4(ii4) = dummyout;pres(iit) = dummyout;temp(iip) = dummyout;%---------------------------------------------------------% merge engineering data onto jdtt grid%-------------------------------------------------------- jde = houre/24 + julian(1970,1,1,0);jde_m = zeros(size(jd)); % jde MergedIrel_m = jde_m;Isys_m = jde_m;Vrel_m = jde_m;Vsys_m = jde_m; % start and end indices of engineering dataif jd(1) < jde(1)  jde_s = jde(1);elseif jd(1) >= jde(1)  jde_s = jd(1);endie_s = min(find(jde>=jde_s)); % Index into Engineering data, Startim_s = find(jd==(jde(ie_s))); % Index into Merged data, Startif jd(end) < jde(end)  jde_e = jd(1);elseif jd(end) >= jde(end)  jde_e = jde(end);endie_e = max(find(jde<=jde_e)); % Index into Engineering data, Endim_e = find(jd==(jde(ie_e))); % Index into Merged data, Endie = [ie_s:ie_e]; % Index into Engineering time-gridim = im_s + [0 : 24*6 : im_e]; % Index into Merged time-gridjde_m(im) = jde(ie);Irel_m(im) = Irel(ie);Isys_m(im) = Isys(ie);Vrel_m(im) = Vrel(ie);Vsys_m(im) = Vsys(ie);%-------------------------------------% ---- save to rodb format%-------------------------------------disp(['writing data to ',outfile]) TIME = gregorian(jd);data = [TIME(:,1:3) hms2h(TIME(:,4:6)) tt1' tt2' tt3' tt4' ...        pres' temp' Irel_m' Isys_m' Vrel_m' Vsys_m']; outvars = ['Latitude:Longitude:Columns:SerialNumber:Mooring:WaterDepth:'...           'Instrdepth:StartDate:StartTime:EndDate:EndTime'];% Instr. info for rodb headerInstrument = 'PIES';                           % column info for rodb headercols       = 'YY:MM:DD:HH:TT1:TT2:TT3:TT4:P:T:IREL:ISYS:VREL:VSYS';% data output formatfort       = ['%4.4d  %2.2d  %2.2d  %7.5f   %8.5f  %8.5f  %8.5f  %8.5f  '...              '%7.3f  %7.3f  %5.5f  %5.5f  %4.2f  %4.2f'];rodbsave(outfile,outvars,fort,...         la,lo,cols,SerialNumber,mo,wd,z,sdate,stime,edate,etime,data);fprintf(fidlog,'Instrument Target Depth[m]: %d\n',z);fprintf(fidlog,'Start date and time: %s \n',datestr(gregorian(jd(1))));fprintf(fidlog,'End date and time:   %s \n',datestr(gregorian(jd(end))));sampling_rate = round(1./median(diff(jd)));ex_samples = round((jd(end)-jd(1))*sampling_rate+1);fprintf(fidlog,'Sampling Frequency [per jd]: %d \n',sampling_rate);fprintf(fidlog,'Number of samples: %d; expected: %d \n',length(jd),ex_samples);if toffset ~= 0  error('toffset is nonzero, but it needs to be subtracted!')  fprintf(fidlog,'Offset of %8.4f days has been subtracted from recored time \n',toffset);  fprintf(1,'Offset of %8.4f days has been subtracted from recored time \n',toffset);end% jym 21 april 2005: alert operator to mismatch in number of data cyclesif length(jd) ~= ex_samples  fprintf('Number of samples differ from that expected, actual: %d, expected: %d \n',...          length(jd),ex_samples)  disp('Press return to continue');  pause endif jd(1) > jd_s  disp(['W A R N I N G: Record only starts after beginning of '...        'mooring deployment period:'])  disp([' Recorded time could be wrong!!']);  fprintf(fidlog,['\n\n W A R N I N G: Record only starts after beginning of '...                  'mooring deployment period: \n Recorded time could be wrong!! \n\n']);end if jd(end) < jd_e  disp(['W A R N I N G: Record already ends before end of '...        'mooring deployment period:'])  disp([' Recorded time could be wrong!! ']);  fprintf(fidlog,['\n\n W A R N I N G: Record already ends before end of '...                  'mooring deployment period: \n Recorded time could be wrong!! \n\n']);end % ---- Graphics -------------------------% plot data if graphics == 'y'graphics = 'y';if graphics == 'y'  figure(33), clf    subplot(3,1,1) % travel time  plot(jd-jd(1),tt1,'k-',...       jd-jd(1),tt2,'b-',...       jd-jd(1),tt3,'g-',...       jd-jd(1),tt4,'r-')  grid on  ylabel('travel time (s)')  title(['PIES:  ',num2str(SerialNumber),'   Depth:  ',num2str(z),' m'])   mtt1 = median(tt1);  fprintf(fidlog,'Median Travel Time 1: %5.5f\n',mtt1);  mtt2 = median(tt2);  fprintf(fidlog,'Median Travel Time 2: %5.5f\n',mtt2);  mtt3 = median(tt3);  fprintf(fidlog,'Median Travel Time 3: %5.5f\n',mtt3);   mtt4 = median(tt4);  fprintf(fidlog,'Median Travel Time 4: %5.5f\n',mtt4);  mtt = mean([mtt1 mtt2 mtt3 mtt4]);  ii1 = find( tt1 > 0 );  sd1 = std(tt1(ii1));  ii2 = find( tt2 > 0 );  sd2 = std(tt2(ii2));  ii3 = find( tt3 > 0 );  sd3 = std(tt3(ii3));  ii4 = find( tt4 > 0 );  sd4 = std(tt4(ii4));  sdtt = mean([sd1 sd2 sd3 sd4]);  yl = mtt1*[1 1] + [-1 1]*sdtt*5;  xl = jd([1 end])-jd(1);  xlim(xl), ylim(yl)  tx =text(xl(1) + diff(xl)*.1,yl(1) + diff(yl)*.85,['median: ',sprintf('%5.5f',mtt)]) ;  set(tx,'FontWeight','bold','FontSize',11)  subplot(3,1,2) % pressure  plot(jd-jd(1),pres,'k-')  grid on  ylabel('pressure (db)')  mp = median(pres);  fprintf(fidlog,'Median Pressure: %5.5f\n',mp);  ii = find( pres > z/2 );    sdp = std(pres(ii));  yl = mp*[1 1] + [-1 1]*sdp*2.2;  xl = jd([1 end])-jd(1);  xlim(xl), ylim(yl)  tx =text(xl(1) + diff(xl)*.1,yl(1) + diff(yl)*.85,['median: ',sprintf('%5.5f',mp)]) ;  set(tx,'FontWeight','bold','FontSize',11)  subplot(3,1,3) % temperature  plot(jd-jd(1),temp,'k-')  grid on  ylabel('temperature (deg C)')  xlabel('days since start_day')  mt = median(temp);  fprintf(fidlog,'Median Temperature: %5.5f\n',mt);  ii = find( temp > 0 & temp < 20 );    sdt = std(temp(ii));  yl = mt*[1 1] + [-1 1]*sdt*2.2;  xl = jd([1 end])-jd(1);  xlim(xl), ylim(yl)  tx =text(xl(1) + diff(xl)*.1,yl(1) + diff(yl)*.85,['median: ',sprintf('%5.5f',mt)]) ;  set(tx,'FontWeight','bold','FontSize',11)    orient tall  print(gcf,'-dpsc',[outfile '.ps']);endcomment = input('Enter additional comment to be save in Log file','s'); if ~isempty(comment)  fprintf(fidlog,'\n COMMENT:\n %s',comment)endfclose(fidlog);