% Save raw ascii data from Ixsea OT tide gauge to rdb format%% % uses load_ot.m, save_ot.m, z2p.m%% Kanzow, 25.04.05 clear all close all% input - likely to be changed  mooring       = ['ebh4_1_200403'];       % cruise        = 'cd170'; operator      = 'Kanzow';   % The path of the offsetfile is still preliminary %%inpath        = '/data/rapid/cd170/moorings/raw/ixsbpr/'; %%outpath       = ['/data/rapid/cd170/moorings/',mooring,'/ixsbpr/']; %%offsetfile    = ['/data/rapid/cd170/moorings/clock_offset.dat']; %%info  = ['/data/rapid/',cruise,'/moorings/',mooring,'/',mooring,'info.dat'];  inpath  = '/local/users/pstar/data/moor/raw/ixsbpr/'; outpath = ['/local/users/pstar/data/moor/proc/',mooring,'/ixsbpr/']; info  = ['/local/users/pstar/data/moor/proc/',mooring,'/',mooring,'info.dat']; offsetfile    = ['/local/users/pstar/data/moor/raw/clock_offset.dat']; ixs_code        = 470; toffset        = 0;  % time offset [lat,lon,wd,sdate,stime,edate,etime,z,type,serial]= ... rodbload(info,...'Latitude:Longitude:WaterDepth:StartDate:StartTime:EndDate:EndTime:z:instrument:serialnumber');% ---------------------------------------- ixI          = find(type==ixs_code); sn           = serial(ixI); % NB The seagauge dir in outpath must be created first logfile       = [outpath,'stage1_log']; log           = fopen(logfile,'w'); fprintf(log,'Processing of Ixsea BPR  from mooring %s \n Date: %s \n',mooring,datestr(clock)'); fprintf(log,'Operator: %s\n',operator');for ins = 1 : length(ixI)  serialnumber = sn(ins);  instrdepth   = z(ixI(ins));  outfile      = [outpath,mooring,'_',sprintf('%5.5d',serialnumber),'.raw'];% ------ data input file and log file  file          = [inpath,'IX',sprintf('%3.3d',serialnumber),'.TXT'];  disp(['Ixsea OT instrument ',num2str(serialnumber),' has been found'])  fprintf(log,'Serial number: %4.4d\n',serialnumber);  fprintf(log,'Target Depth [m]: %4.4d\n',instrdepth);  fprintf(log,'Input file: %s\n',file);  fprintf(log,'Output file: %s\n',outfile);% load data and carry out basic checks  [Z,T,jd,meas,sampling_rate,qflag] = load_ot(file,log);  P = z2p(Z,lat);% ----------------------------------------------------------------% -------check data ----------------% ----------------------------------------------------------------  % ---- check for potential time offset entry in the 'offsetfile' -----   try      fidoff = fopen(offsetfile,'r');   catch        fprintf(log,['Time offset file NOT found, \n NO check for ',...                  'potential offset in recorded time applied \n'],offsetfile)      fprintf(1,['Time offset file  NOT found, \n NO check for ',...              potential offset in recorded time applied \n'],offsetfile)    end        if fidoff > 0                while 1        zeile = fgetl(fidoff);       if ~ischar(zeile)           break        end        if ~isempty(findstr(zeile,mooring))             val = findstr(zeile,' ');	  val = str2num(zeile(val:end));          if val(1)== ixs_code & val(2) == serialnumber 	    toffset = val(3) + val(4)/24;                  fprintf(1,['Instrument has time offset of %8.4f days ',...                       '(rel. GMT) \n'],toffset);             fprintf(log,['Instrument has time offset of %8.4f days',...                       ' (rel. GMT) \n'],toffset);            break           end       end     end   % while   end  % fidlog  jd = jd - toffset; %apply potential correction of recorded time  bottomstart     = julian([sdate(:)' hms2h([ stime(:)' 0])]);  bottomstop      = julian([edate(:)' hms2h([ etime(:)' 0])]);  if jd(end) < bottomstop    fprintf(1,'\n\n W A R N I N G: Record already ends before end of mooring deployment period: \n Recorded time could be wrong!! \n')  end   if jd(1) > bottomstart    fprintf(1,'\n\n W A R N I N G: Record only starts after beginning of mooring deployment period: \n Recorded time could be wrong!! \n')  end %%  % --- check if data if wrapped ---------------------------------------- %%  wrap =  find(serialnumber == wrapped_sensor);%%  figure(99);clf%%  plot(P)%%  grid on %%  title(['Serial number: ',num2str(serialnumber),'; target depth:',num2str(instrdepth)])%%  hold on%%  disp(['The bottom pressure may contain "wrapped" data - inspect figure 99'])%%  corr= input(['Do you want to correct for "wrapped" data? y/n '],'s');    %%  if ~isempty(wrap)& %%  if strcmp(corr,'y') %%    if ~isempty(wrap) %%      offset = 2^19 / wrap_correction(wrap)/1.4503774;%%    else%%      wrap_correction = input(['Insert pressure coefficient M from the ',...%%		     'hex data file of sensor #',num2str(serialnumber),': ']);%%      offset = 2^19 / wrap_correction/1.4503774;%%    end %%    ind = input(['From figure 99 select index range of wrapped',...%%                ' data [ind1 ind2]: ']); %%    Pneu = P;%%    Pneu(ind(1):ind(end)) = Pneu(ind(1):ind(end)) + offset;%%    clf,     %%    plot(Pneu,'r')%%    hold on%%    plot(P,'b')%%    grid on%%    legend('P_{wrapped}','P_{corrected}')%%    success = input('Was correction successful? y/n ','s');%%    if strcmp(success,'n')%%        disp('Break')%%        break%%    else %%       P = Pneu; %%       fprintf(log,[['Correction for "wrapped" data applied for elements'], ...%%            [' : [%d - %d] \n']],ind);%%    end      %%  end   %% end% ----- plot --------------- jd_start = julian([sdate' hms2h([stime;0]')']); jd_end   = julian([edate' hms2h([etime;0]')']); ii       = find(jd<jd_end & jd>jd_start+.3); figure(1) plot(jd(ii)-jd(1),P(ii))% --------- make logfile entries ----------------   sz = size(P);   fprintf(log,'Median Pressure [dbar]: %5.1f\n',median(P));   fprintf(log,'Median Temperature [deg C]: %5.1f\n',median(T));   fprintf(log,'Start date and time: %s \n',datestr(gregorian(jd(1))));   fprintf(log,'End date and time:   %s \n',datestr(gregorian(jd(end))));   sampling_rate = round(1./median(diff(jd)));   ex_samples = round((jd(end)-jd(1))*sampling_rate+1);   fprintf(log,'Sampling Frequency [per day]: %d \n',sampling_rate);   fprintf(log,'Number of samples: %d; expected: %d \n\n\n',sz(1),ex_samples);   if toffset ~= 0     fprintf(log,'Offset of %8.4f days has been subtracted from recored time \n',toffset);     fprintf(1,'Offset of %8.4f days has been subtracted from recored time \n',toffset);   end  if jd(end) < bottomstop  fprintf(log,['\n\n W A R N I N G: Record already ends before end',...  'of mooring deployment period: \n Recorded time could be wrong!! \n'])  end   if jd(1) > bottomstart  fprintf(log,['\n\n W A R N I N G: Record only starts after beginning',...  'of mooring deployment period: \n Recorded time could be wrong!! \n'])  end % ------save data (in rodb) --------- out = save_ot(outfile,P,T,jd,mooring,lat,lon,wd,sdate,stime,edate,etime,instrdepth,serialnumber); fclose(log);end