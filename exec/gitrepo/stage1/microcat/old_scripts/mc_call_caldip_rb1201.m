% MC_CALL_CALDIP_RB1201 is a script that performs stage1 processing% on microcat data from CTD calibration casts (caldips).  It% converts microcat data from raw to rodb format for an entire% caldip, and plots it with CTD data.%% It calls microcat2rodb_3 (to convert microcat_data), rodbload.m,% timeaxis.m, auto_filt.m, julian.m%% quick-look for microcat calibration profiles and conversion to rodb%% 10/07 scu, D324: now reads and plots ctd ctu file using pload% 28/10/08 ZBS: modified to print combined graphs for d334% 22/10/09 PGW: updated for D344% 26/03/10 SCU: Added mload to import netcdf CTD 1hz file% 27/03/10 scu/zbs, oc459: updated for oc459, copied this file from%   mc_call_calib2_oc459.m, added a descriptive header% 19/12/10 efw, d359: updated for d359, copied this file from%   mc_call_caldip_oc459.m.% February 2012, GDM: updated for RB1201, including changing parse_cnv for% the files on the Ron Brown% -----------------------------------------------------------------% --- This is the information that needs to be modified for -------% --- different users, directory trees, and moorings --------------% ----------------------------------------------------------------cruise = 'rb1201';cast = '8';% Table relating our cast number to equivalent CTD numbercasttable =[1		2		3		4		5		6    7    8   9     10;            1		5		10		14		19		30   31   32  33    45;];						ctdnum = sprintf('%03d',casttable(2,str2num(cast)));doctd = 1; % whether to load and plot CTD databasedir = '/Volumes/RB1201/rapid/data/';rawctddir = '/Volumes/CTD/AB1202/ctd/1Hz/proc_data/';% 1. RB1201 - Copy CTD data from network to our CTD directory%% Network CTD data is mounted from 'ctd' in 'ab1202'% /Volumes/CTD/AB1202/ctd/1Hz/proc_data%ctddir = '/Volumes/RB1201/rb1201/ctd/'; % rb1201nul = unix(['cp -p /Volumes/RB1201/rb1201/ctd/ab1202_' ctdnum '.cnv ' ctddir]);% if nul~=0 & doctd, error('CTD data not copied'), end;% -----------------------------------------------------------------% --- set paths for data input and output ---inpath    = [basedir 'moor/raw/' cruise '/microcat_cal_dip/cast',cast,'/'];outpath   = [basedir 'moor/proc_calib/' cruise '/cal_dip/microcat/cast' cast '/'];infofile  = [basedir 'moor/proc_calib/' cruise '/cal_dip/cast',cast,'info.dat'];% ctdinfile = [ctddir  'ctd_rb1201_',ctdnum,'_psal.nc'];nul = unix(['cp -p /Volumes/ab1202/1db/proc_data/ab1202_' ctdnum '.cnv ']);%addpath('/noc/users/pstar/di359/data/mexec_processing_scripts/',path);jd0 = julian(2012,1,0,0);if doctd == 1;    ctdinfile = [ctddir  'ab1202_',ctdnum,'.cnv'];    %     if ~exist([ctddir,matfile],'file')    ctd=parse_cnv(ctdinfile);    %       eval(['save ',ctddir,matfile,' ctd'])    %     else    %         load([ctddir,matfile]);    %     end    ctd_press=ctd.press;    ctd_temp = ctd.temp1;    ctd_cond=ctd.cond1;    ctd_salin=sw_salt(ctd_cond,ctd_temp,ctd_press);%     ctd_hours = ctd.hours;%     ctd_jd=ctd.jultime;    if str2num(cast)==9;ctd.timeJ=ctd.timeJ-28;end;% Adjustment due to leap year problems on RB1201    d=ctd;%     d.cond1=d.cond1*10;%     d.time=d.jultime;%     d.timeJ=d.hours/24+d.starttime-jd0;    % when loading a mat-file, for D344%     HH = h.data_time_origin(4)+h.data_time_origin(5)/60+h.data_time_origin(6)/3600;    %     jtime=h.data_time_origin(1:3);    %     jtime=[jtime HH];    %     d.timeJ=julian(jtime)+d.time/86400-jd0;end% --- get mooring information from infofile ---[id,sn]= rodbload(infofile,'instrument:serialnumber');% --- vector of serial numbers ---ii = find(id >= 332 & id <= 337);vec = sn(ii);% --- initialize figuresfigure(34);clf;hold oncol = 'brgkmcybrgkmcybrgkmc';figure(35);clf;hold oncol = 'brgkmcybrgkmcybrgkmc';figure(36);clf;hold oncol = 'brgkmcybrgkmcybrgkmc';% --- create log file ---%fidlog = fopen([outpath,'microcat2rodb.log'],'a');fidlog = fopen([outpath,'microcat2rodb.log'],'w');legend_handle = ['[';'[';'['];legend_string = [];% --- read data loop --for i = 1:length(vec)    % display( [,num2str(vec(i)),])    fprintf(fidlog,'\n\n');    infile = [inpath,sprintf('%4.4d',vec(i)),'cal2.asc'];    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'cal.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%3.3d',vec(i)),'cal.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'CAL.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%3.3d',vec(i)),'CAL.asc'];    end    if exist(infile) ~= 2        infile = [inpath,'cal',sprintf('%4.4d',vec(i)),'.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_cal_dip2.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_cal_dip_data2.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_test.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_cal_dip.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_cal_dip_data.asc'];    end    if exist(infile) ~= 2        infile = [inpath,sprintf('%4.4d',vec(i)),'_cal_dip_data.cnv'];    end    outfile = [outpath, 'cast', cast ,'_',sprintf('%4.4d',vec(i)),'.raw'];    % --- convert from raw to rodb format ---    microcat2rodb_3(infile,outfile,infofile,fidlog,'w',0)    % --- load rodb data ---    [yy,mm,dd,hh,c,t,p] = rodbload(outfile,'yy:mm:dd:hh:c:t:p');    %  if (i > 6 & i<=12)  lstr='--'; elseif i>12  lstr ='-.'; else lstr = '-'; end    if (i > 7 & i<=14)  lstr='--'; elseif i>14  lstr ='-.'; else lstr = '-'; end    disp(['plotting ',num2str(i),': s/n:',num2str(sn(i))])    %    pause    % correct timing errors for a number of microcats    jd = julian(yy,mm,dd,hh)-jd0;        macfigure(34)    eval(['hc' num2str(i) '=plot(jd,c,[col(i),lstr])']); grid on    macfigure(35)    eval(['ht' num2str(i) '=plot(jd,t,[col(i),lstr])']); grid on    macfigure(36)    eval(['hp' num2str(i) '=plot(jd,p,[col(i),lstr])']); grid on    %    plot(jd,p,[col(i),'.']);    if doctd % interpolate CTD onto microcat for a rough and ready mean diff        pi = interp1(d.timeJ, d.press, jd);        ti = interp1(d.timeJ, d.temp1, jd);        ci = interp1(d.timeJ, d.cond1*10., jd);        dp = diff(pi) ;        idp = find(dp(floor(length(dp)/2)-36:end-36) < 0.5);        pdiff = ['mean p diff = ' num2str(nanmean(abs(p(idp) - pi(idp)))) ...            ' --- ' num2str(vec(i))];        cdiff = ['mean c diff = ' num2str(nanmean(abs(c(idp) - ci(idp)))) ...            ' --- ' num2str(vec(i))];        tdiff = ['mean t diff = ' num2str(nanmean(abs(t(idp) - ti(idp)))) ...            ' --- ' num2str(vec(i))];        disp(pdiff)        disp(cdiff)        disp(tdiff)        fprintf(fidlog,'%s \n',pdiff);        fprintf(fidlog,'%s \n',cdiff);        fprintf(fidlog,'%s \n',tdiff);    end    if i<length(vec)&~isempty(eval(['hc' num2str(i)]));        %        legend_handle(1,:) = [legend_handle(1,:) ['hc' num2str(i) ',']];        %        legend_handle(2,:) = [legend_handle(2,:) ['hp' num2str(i) ',']];        %        legend_handle(3,:) = [legend_handle(3,:) ['ht' num2str(i) ',']];        legend_handle = [legend_handle ...            ['hc' num2str(i) ',';'hp' num2str(i) ',';'ht' num2str(i) ',']];        legend_string = [legend_string '''' num2str(vec(i)) ''',' ];    elseif i==length(vec)&~isempty(eval(['hc' num2str(i)]));        %        legend_handle(1,:) = [legend_handle(1,:) ['hc' num2str(i) ']']];        %        legend_handle(2,:) = [legend_handle(2,:) ['hp' num2str(i) ']']];        %        legend_handle(3,:) = [legend_handle(3,:) ['ht' num2str(i) ']']];        legend_handle = [legend_handle ...            ['hc' num2str(i) ']';'hp' num2str(i) ']';'ht' num2str(i) ']']];        legend_string = [legend_string '''' num2str(vec(i)) '''' ];    end;    disp(['proceeding to next file '])end % for i = 1:length(vec)fclose(fidlog)% --- tidy-up graphics, add CTD data ---outfig = [outpath, 'cast', cast ,'_all'];figure(34)% num_legend(vec(:)',[],4)eval(['legend(' legend_handle(1,:) ',' legend_string ')'])ylabel('conductivity')xlabel('yearday (relative to 2012/1/0 00:00)')title(['CAST ' cast ' Calibration Dip'])if doctd    % plot(ctd_jd - jd0 ,ctd_cond*10,'k-')    %  plot(d.timeJ,d.c0S_slash_m*10.,'k-')    plot(d.timeJ,d.cond1,'k-')    plot(d.timeJ,d.cond2,'color',[.3 .3 .3]); % testing for sensor drift    title(['CAST ' cast  ' Calibration Dip (-k=CTD)'])endorient tallprint(gcf,'-depsc',[outfig '_cond.ps'])saveas(gcf,[outfig '_cond.fig'],'fig')%print(['-f' num2str(gcf)],[outfig '_cond.fig'])figure(35)% num_legend(vec(:)',[],4)eval(['legend(' legend_handle(2,:) ',' legend_string ')'])ylabel('temperature')xlabel('yearday (relative to 2012/1/0 00:00)')title(['CAST ' cast ' Calibration Dip'])if doctd    % plot(ctd_jd - jd0,ctd_temp,'k-')    plot(d.timeJ,d.temp1,'k-');    plot(d.timeJ,d.temp2,'color',[.3 .3 .3]); % testing for sensor drift    %  plot(d.timeJ,d.t090C,'k-');    title(['CAST ' cast ' Calibration Dip (-k=CTD)'])    title(['CAST ' cast ' Calibration Dip (-k=CTD)'])endorient tallprint(gcf,'-depsc',[outfig '_temp.ps'])saveas(gcf,[outfig '_temp.fig'],'fig')%print(['-f' num2str(gcf)],[outfig '_temp.fig'])figure(36)% num_legend(vec(:)',[],4)eval(['legend(' legend_handle(3,:) ',' legend_string ')'])ylabel('pressure')xlabel('yearday (relative to 2012/1/0 00:00)')title(['CAST ' cast ' Calibration Dip'])if doctd    % plot(ctd_jd - jd0 ,ctd_press,'k-')    plot(d.timeJ,d.press,'k-');    title(['CAST ' cast ' Calibration Dip (-k=CTD)'])endorient tallprint(gcf,'-depsc',[outfig '_pres.ps'])saveas(gcf,[outfig '_pres.fig'],'fig')%print(['-f' num2str(gcf)],[outfig '_pres.fig'])disp(['number of MicroCATs processed = ' num2str(length(vec))])figure(34)%timeaxis([2008,1,0])figure(35)%timeaxis([2008,1,0])figure(36)%timeaxis([2008,1,0])