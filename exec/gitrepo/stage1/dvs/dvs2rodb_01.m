% function dvs2rodb_01(moor,'inpath','outpath','procpath')% Function to convert TRDI DVS Single Point CM data to rodb format.% raw DVS data in .mat format as exported by WINADCP%%% required inputs: moor - mooring name e.g. 'wb2_3_200606'%% optional inputs: procpath - if not using standard paths for info.dat file%                  inpath - if not using standard paths%                  outpath - if not using standard paths%% functions called: hms2h.m%                   julian.m%                   rodbload.m%% Rayner, 3rd December 2009 - converted from nortek2rodb_01% Written for DVSs without pressure sensor but could be easily adaptedfunction dvs2rodb_01(moor, varargin)if nargin==0    help dvs2rodb_01    returnend% check for optional argumentsa=strmatch('procpath',varargin,'exact');if a>0    procpath=char(varargin(a+1));else    procpath='/noc/ooc/rpdmoc/rapid/data/moor/proc';enda=strmatch('inpath',varargin,'exact');if a>0    inpath=char(varargin(a+1));else    inpath=['/noc/ooc/rpdmoc/rapid/data/moor/raw/' moor '/'];enda=strmatch('outpath',varargin,'exact');if a>0    outpath=char(varargin(a+1));else    outpath = './';end% --- get moring information from infofile infofile =[procpath '/' moor '/' moor 'info.dat'];if isunix        [gash, operator]=system('whoami'); % This line will not work if run from a PC.        % % gash is not used, but a second variable needs to be specified for the system commandelse    operator=input('Enter opeartor name: ','s');end% ----- read infofile / open logfile  ------------------------------------infovar = 'instrument:serialnumber:z:Start_Time:Start_Date:End_Time:End_Date:Latitude:Longitude:WaterDepth'; [id,sn,z,s_t,s_d,e_t,e_d,lat,lon,wd]  =  rodbload(infofile,infovar);fidlog   = fopen([outpath,moor,'_DVS_stage1.log'],'a');fprintf(fidlog,'Transformation of DVS .mat data to rodb format \n');fprintf(fidlog,'Processing carried out by %s at %s\n\n\n',operator,datestr(clock));fprintf(fidlog,'Mooring   %s \n',moor);fprintf(fidlog,'Latitude  %6.3f \n',lat);fprintf(fidlog,'Longitude %6.3f \n\n\n',lon);bg = julian([s_d(:)' hms2h([s_t(:)' 0])]); %started = julian([e_d(:)' hms2h([e_t(:)' 0])]); %endvec=find(id==369); % DVS instrument code% -------- load data --------------for i = 1:length(vec)    infile=[inpath num2str(sn(vec((i)))) '_data.mat']        indep=z(vec(i));    if length(indep)>1        indep=indep(1);    end    fprintf(fidlog,'infile : %s\n',infile);    fprintf(fidlog,'DVS serial number  : %d\n',sn(vec(i)));    all_data=load(infile);    month=all_data.SerMon; day=all_data.SerDay; year=all_data.SerYear+2000; % year is year since 2000     hour=all_data.SerHour; minute=all_data.SerMin; second=all_data.SerSec; hund_seconds=all_data.SerHund;    pitch=all_data.AnP100thDeg/100; roll=all_data.AnR100thDeg/100; heading=all_data.AnH100thDeg/100;    t=all_data.AnT100thDeg/100;    Amp1=all_data.SerEA1cnt; Amp2=all_data.SerEA2cnt; Amp3=all_data.SerEA3cnt; Amp4=all_data.SerEA4cnt;    Beam1Cor=all_data.SerC1cnt; Beam2Cor=all_data.SerC2cnt; Beam3Cor=all_data.SerC3cnt; Beam4Cor=all_data.SerC4cnt;    u=all_data.SerEmmpersec/10; v=all_data.SerNmmpersec/10; w=all_data.SerVmmpersec/10;    err=all_data.SerErmmpersec/10;    spd=all_data.SerMagmmpersec/10; dir=all_data.SerDir10thDeg/10;    PG1=all_data.SerPG1; PG2=all_data.SerPG2; PG3=all_data.SerPG3; PG4=all_data.SerPG4;        dat       = [year month day hms2h(hour,minute,(second+hund_seconds))];    jd        = julian(dat);    valI      = find(jd<ed & jd>bg);        % determine bin depths - start and end    bin_depths=zeros(2,5);    bin_depths(1,1)=all_data.RDIBin1Mid-all_data.RDIBinSize/2;    for m=2:5        bin_depths(1,m)=bin_depths(1,m-1)+all_data.RDIBinSize;    end    bin_depths(2,:)=bin_depths(1,:)+all_data.RDIBinSize;    % ----- save data to rodb -----------------        for j=1:5        outfile=[moor '_' num2str(sn(vec((i)))) '_bin' num2str(j) '.raw'];        columns = 'YY:MM:DD:HH:T:U:V:W:HDG:PIT:ROL:CS:CD:BEAM1SS:BEAM2SS:BEAM3SS:BEAM4SS:BEAM1COR:BEAM2COR:BEAM3COR:BEAM4COR:EV:BEAM1PGP:BEAM2PGP:BEAM3PGP:BEAM4PGP';        data = [dat t u(:,j) v(:,j) w(:,j) heading pitch roll spd(:,j) dir(:,j) Amp1(:,j) Amp2(:,j) Amp3(:,j) Amp4(:,j) Beam1Cor(:,j) Beam2Cor(:,j) Beam3Cor(:,j) Beam4Cor(:,j) err(:,j) PG1(:,j) PG2(:,j) PG3(:,j) PG4(:,j)];         fort =['%4.4d %2.2d %2.2d  %6.4f  %4.2f %4.1f %4.1f %4.1f  %4.2f %4.2f %4.2f  %4.1f  %4.1f  %3.0f %3.0f %3.0f %3.0f   %3.0f %3.0f %3.0f %3.0f  %4.1f  %3.0f %3.0f %3.0f %3.0f'];        infovar = ['Mooring:Start_Time:Start_Date:End_Time:End_Date:Latitude:Longitude:WaterDepth:' ...                   'Columns:SerialNumber:InstrDepth'];         rodbsave([outpath outfile],infovar,fort,moor,s_t,s_d,e_t,e_d,lat,lon,wd,columns,...                 sn(vec(i)),indep,data);        eval(['disp(''Data written to ' outpath outfile ''')']);        fprintf(fidlog,'outfile: %s\n',outfile);        end    % -------- generate logfile entries --------------    sz   =   size(data);    fprintf(fidlog,'Instrument Target Depth[m]  : %d\n',indep);    fprintf(fidlog,'Start date and time         : %s \n',datestr(gregorian(jd(1))));    fprintf(fidlog,'End date and time           : %s \n',datestr(gregorian(jd(end))));    sampling_rate = round(1./median(diff(jd)));    ex_samples = round((jd(end)-jd(1))*sampling_rate+1);    fprintf(fidlog,'Sampling Frequency [per day]: %d \n',sampling_rate);    fprintf(fidlog,'Number of samples           : %d; expected: %d \n',sz(1),ex_samples);    for k=1:5        if k==1            m_hdg = median(heading(valI,:));            m_pit = median(pitch(valI,:));            m_rol = median(roll(valI,:));            fprintf(fidlog,'Median heading / pitch / roll [deg]                 : %4.1f  %4.1f  %4.1f\n',m_hdg, m_pit, m_rol);            m_t = median(t(valI,:));            fprintf(fidlog,'Median temperature [deg C]                          : %4.2f\n',m_t);        end                m_u = median(u(valI,k));        m_v = median(v(valI,k));        m_w = median(w(valI,k));        m_Beam1ss = median(Amp1(valI,k));        m_Beam2ss = median(Amp2(valI,k));        m_Beam3ss = median(Amp3(valI,k));        m_Beam4ss = median(Amp4(valI,k));        m_Beam1cor = median(Beam1Cor(valI,k));        m_Beam2cor = median(Beam2Cor(valI,k));        m_Beam3cor = median(Beam3Cor(valI,k));        m_Beam4cor = median(Beam4Cor(valI,k));        m_Beam1PGP = median(PG1(valI,k));        m_Beam2PGP = median(PG2(valI,k));        m_Beam3PGP = median(PG3(valI,k));        m_Beam4PGP = median(PG4(valI,k));        m_err = median(err(valI,k));        m_spd = median(spd(valI,k));        m_dir = median(dir(valI,k));                fprintf(fidlog,'\nBin %d : %3.2f m - %3.2f m from sensor head\n\n', k, bin_depths(1,k), bin_depths(2,k));        fprintf(fidlog,'Median velocity u / v / w [cm/s]                                 : %4.1f  %4.1f  %4.1f\n',m_u, m_v, m_w);        fprintf(fidlog,'Median signal strength Beam1 / Beam2 / Beam3 / Beam4 [counts]    : %3.0f  %3.0f  %3.0f  %3.0f\n',m_Beam1ss, m_Beam2ss, m_Beam3ss, m_Beam4ss);        fprintf(fidlog,'Median correlation Beam1 / Beam2 / Beam3 / Beam4 [counts]        : %3.0f  %3.0f  %3.0f  %3.0f\n',m_Beam1cor, m_Beam2cor, m_Beam3cor, m_Beam4cor);        fprintf(fidlog,'Median percent good pings Beam1 / Beam2 / Beam3 / Beam4 [counts] : %3.0f  %3.0f  %3.0f  %3.0f\n',m_Beam1PGP, m_Beam2PGP, m_Beam3PGP, m_Beam4PGP);        fprintf(fidlog,'Median velocity error [cm/s]                                     : %4.1f\n',m_err);        fprintf(fidlog,'Median speed [cm/s]                                              : %4.1f\n',m_spd);        fprintf(fidlog,'Median direction [cm/s]                                          : %5.2f\n',m_dir);    endend  % loop of serial numbers