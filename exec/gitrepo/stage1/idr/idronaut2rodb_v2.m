% function idronaut2rodb_v2(moor,'procpath',procpath,'inpath',inpath, ...%                           'outpath',outpath,'plot_interval',plot_interval)% Idronaut Data Conversion Routine%% Written by Darren Rayner%% Required inputs:%   moor = mooring name as string e.g. 'wb1_2_200527'%% Optional inputs:%   'procpath' = path to proc directory if not using standard paths e.g.%               '/Volumes/jrd/jrd/hydro10/rapid/data/moor/proc/'%               Need to specify procpath if processing ctd cast as%               proc_calib directory is seperated by cruise not mooring id.%               e.g. '/noc/ooc/rpdmoc/rapid/data/moor/proc_calib/rb0602/cal_dip' %               is for the ctd casts on rb0602.%   'inpath'   = path to raw rcm files - if not using standard raw paths%               standard input path =%               /noc/ooc/rpdmoc/rapid/data/moor/raw/"MOORING"/rcm/ %               where "MOORING" is the mooring name e.g. wb1_2_200527%               (once this standard has been adopted which as yet it hasn't)%   'outpath'  = path for output .raw files - default is directory function%                run from%   'plot_interval' = array containing start and end times to plot. in form%               '[startyyyy startmm startdd starthh; endyyyy endmm enddd endhh]' %               need to include quote marks.%% Uses the following functions:-% hms2h.m% rodbload.m% rodbsave.m% julian.m% timeaxis.m% CHANGES:- 11/01/07 - Changed to optional input arguments, and created v2%           12/01/07 - changed string reading to read formatted string%                      (strread)%           12/01/07 - move graphics section to stage2function idronaut2rodb_v2(moor, varargin);if nargin==0    help idroanut2rodb_v2    returnend% check for optional argumentsa=strmatch('procpath',varargin,'exact');if a>0    procpath=char(varargin(a+1));else    procpath='/noc/ooc/rpdmoc/rapid/data/moor/proc';enda=strmatch('inpath',varargin,'exact');if a>0    inpath=char(varargin(a+1));else    inpath=eval(['''/noc/ooc/rpdmoc/rapid/data/moor/raw/' moor '/idr/'';']);enda=strmatch('outpath',varargin,'exact');if a>0    outpath=char(varargin(a+1));else    outpath = './';enda=strmatch('plot_interval',varargin,'exact');if a>0    plot_interval=(varargin(a+1));    plot_interval=str2num(plot_interval{1});else    plot_interval=1; % automatically calculate laterendInstrument = 'IDRONAUT';           % Instr. info for rodb headercols       = 'YY:MM:DD:HH:T:C:P';    % column info for rodb headerfort       = '%4.4d  %2.2d  %2.2d  %7.5f   %5.3f  %5.3f  %6.2f  '; %data output formatinfofile=[procpath '/' moor '/' moor 'info.dat'];% check if infile and infofile existif exist(infofile) ~= 2   disp(['infofile:  ',infofile,' does not exist'])   returnend[gash, operator]=system('whoami'); % This line will not work if run from a PC. May need to edit it out.% % gash is not used, but a second variable needs to be specified for the system command% create vector of serial numbers from info file[z,id,sn]= rodbload(infofile,'z:id:sn');if isempty(id) | isnan(id)  ;[z,id,sn,lat,lon]= rodbload(infofile,'z:instrument:serialnumber:latitude:longitude');endii = find(id == 339);vec = sn(ii);           % serial numbers of Idronautsdepths=z(ii);fidlog = fopen([outpath, '/' moor '_idronaut_stage1.log'],'a');fprintf(fidlog,'Transformation of Idronaut ascii data to rodb format \n');fprintf(fidlog,'Processing carried out by %s at %s\n\n\n',operator,datestr(clock));fprintf(fidlog,'Mooring   %s \n',moor);fprintf(fidlog,'Latitude  %6.3f \n',lat);fprintf(fidlog,'Longitude %6.3f \n',lon);for iii = 1:length(vec),    fprintf(fidlog,'\n\n');     infile = [inpath,'/',sprintf('%3.3d',vec(iii)),'_data.asc'];        % ......in case of other infile names.....    if exist(infile)~=2       disp('infile does not exist')       disp(infile)       infile=input('Please enter name of infile (without path):- \n','s')       infile=[inpath,'/',infile]    end         outfile = [outpath,'/',moor,'_',sprintf('%3.3d',vec(iii)),'.raw'];    if exist(outfile) == 2       disp(['oufile:  ',outfile,' alredy exists!!'])         overwrite =  input('Overwrite y/n  ','s');        if overwrite ~='y'         disp('data conversion stop')         return       end    end    fid = fopen(infile,'r');    if fid == -1        disp(['unable to open infile:  ',infile])        return    else        disp(['loading ',infile]);    end     % START READING ASCII DATA FILE    % =============================================    % START OF IGNORING CHARACTERS AT START OF FILE    check=1;    while check==1   % Scrolls through file until finds first header line        dataline=fgetl(fid);        linecheck=findstr('  Press   Temp    Cond    Sal   ',dataline);        check=isempty(linecheck);    end    check=1; % resets check variable    i=1;    while check==1        dataline=fgetl(fid);        linecheck2=findstr('<any key>',dataline);        if isempty(linecheck2);            linecheck=findstr('.',dataline); % checks line has a . in it so can differentiate from header lines            if ~isempty(linecheck)                [pressure(i) temperature(i) conductivity(i) salinity(i) time datestring]=strread(dataline,'%f %f %f %f %s %s');%                pressure(i,:)=dataline(1:7);%                temperature(i,:)=dataline(10:15);%                conductivity(i,:)=dataline(18:23);%                salinity(i,:)=dataline(26:31);%                time(i,:)=dataline(33:40);%                date(i,:)=[dataline(45:46),'-',dataline(42:43),'-',dataline(48:51)];                datestring=char(datestring);                datestring=[datestring(4:5),'-',datestring(1:2),'-',datestring(7:10)];                date_time(i,:)=[datestring,' ',char(time)];                i=i+1;            end        else            check=0;        end    end%     pressure=pressure(1:i-1,:); % removes extra line at end of data%     temperature=temperature(1:i-1,:); % removes extra line at end of data%     conductivity=conductivity(1:i-1,:); % removes extra line at end of data%     salinity=salinity(1:i-1,:); % removes extra line at end of data%     date_time=date_time(1:i-1,:); % removes extra line at end of data    num_samples=length(pressure);        date_time_num=date_time;    date_time=datestr(date_time,'dd/mm/yyyy HH:MM:SS');    start_date=date_time(1,1:10);    start_time=date_time(1,12:19);%     if str2num(date_time(1,4:5))<str2num(date_time(2,4:5))%         sample_interval=[num2str(str2num(date_time(2,12:13))-str2num(date_time(1,12:13))),':',num2str(str2num(date_time(2,15:16))-str2num(date_time(1,15:16))),':',num2str(str2num(date_time(2,18:19))-str2num(time(1,18:19)))];%     else%         sample_interval=[num2str(str2num(date_time(3,12:13))-str2num(date_time(2,12:13)),'%02d'),':',num2str(str2num(date_time(3,15:16))-str2num(date_time(2,15:16)),'%02d'),':',num2str(str2num(date_time(3,18:19))-str2num(date_time(2,18:19)),'%02d')];%     end%     %     sample_interval    %---------------------------------------------------------------    % get missing header variables from info.dat file    %---------------------------------------------------------------    infovar ='Mooring:Latitude:Longitude:Waterdepth:id:serialnumber:z:StartDate:StartTime:EndDate:EndTime';     [mo,la,lo,wd,id,sn,z,sdate,stime,edate,etime]=rodbload(infofile,infovar);     if isempty(id) | isnan(id)      infovar ='Mooring:Latitude:Longitude:Waterdepth:instrument:serialnumber:z:StartDate:StartTime:EndDate:EndTime';       [mo,la,lo,wd,id,sn,z,sdate,stime,edate,etime]=rodbload(infofile,infovar);     end    if iscell(mo)      mo = deal(mo{:}); % convert cell array    end    z  = depths(iii);         % instrument depth    % END OF DATA READ IN PART    % =================================================    % Start of Writing info to log file    if strfind(operator,'pstar')        operator=input('Please enter operator name:- ','s')    end    fprintf(fidlog,'Transformation of Idronaut ascii data to rodb format \n');    fprintf(fidlog,'Processing carried out by %s at %s\n\n\n',operator,datestr(clock));    fprintf(fidlog,'Mooring   %s \n',mo);    fprintf(fidlog,'Latitude  %6.3f \n',la);    fprintf(fidlog,'Longitude %6.3f \n',lo);    fprintf(fidlog,'Infile: %s\n',infile);    fprintf(fidlog,'Outfile: %s\n',outfile);    fprintf(fidlog,'Serial Number: %7d \n',vec(iii));    fprintf(fidlog,'Start Date: %s/%s/%s\n',start_date(4:5),start_date(1:2),start_date(7:10));    fprintf(fidlog,'Start Time: %s\n',start_time);%     fprintf(fidlog,'Sampling Interval (minutes): %s\n',sample_interval);    fprintf(fidlog,'Number of Samples: %d\n',num_samples);    comment = input('Enter additional comment to be saved in Log file: -\n','s');     if ~isempty(comment)      fprintf(fidlog,'\n COMMENT:\n %s',comment)    end    % End of writing info to log file    % =================================================    % START OF DATE CONVERSION    day_=str2num(date_time(1:num_samples,1:2));    month_=str2num(date_time(1:num_samples,4:5));    year_=str2num(date_time(1:num_samples,7:10));    hour_=hms2h(str2num(date_time(1:num_samples,12:13)),str2num(date_time(1:num_samples,15:16)),str2num(date_time(1:num_samples,18:19)));    % hms2h is a function written by Torsten Kanzow    % END OF DATE CONVERSION    % ==============================================    % START OF SAVE TO RODB FORMAT    disp(['writing data to ',outfile])     data = [year_ month_ day_ hour_ temperature' conductivity' pressure'];     rodbsave(outfile,...           'Latitude:Longitude:Columns:SerialNumber:Mooring:WaterDepth:Instrdepth:StartDate:StartTime:EndDate:EndTime',...             fort,...             la,lo,cols,vec(iii),mo,wd,z,sdate,stime,edate,etime,...             data);    fclose('all');    % END OF RODB SAVE    % ==============================================end