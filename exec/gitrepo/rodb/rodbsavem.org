function rodbsave(filename,variables,format,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20)
%RODBSAVE Save RO database files.
%  RODBSAVE('filename','variables','format',V1,V2, ..., A)
%
%  filename : rodb-output file, absolute path
%  
%  variables : identifier rodb HEADER variables, as one string 
%  separated by ':' , e.g. 'Filename:Instrument:Waterdepth:InstrDepth'
%  type 'roident' for a list of valid identifier  
%
%  format : format of data matrix as used with fprintf 
%  
%  v1-v19 : header variables, e.g. positions,waterdepth
%           in same order as 'variables'
%  
%  A  : data matrix  
%  
%  NOTE : HOURS must be decimal HOURS, e.g. 15.25 for 15:15  
%  
%  NOTE 2 : always use header variable 'columns' for column identifier
%           of data, type 'roident' for valid identifiers  
%  
%  Christian Mertens, IfM Kiel
%  $Revision: 0.3 $ $Date: 2000/12/14 08:20:35 $
%  support for cellstrings in header variables
%   added, F. Morsdorf, IfM Kiel Jun. 1999
%  comment added : F. Morsdorf, T. Kanzow
%  new header time format allowed, F. Morsdorf
  
% append newline to format string if necessary
if ~strcmp(format(length(format)),'\n')
  format = [format,'\n'];
end

% sort header keys
[k,fmt,n,key] = rodbhead(variables);
[k,i] = sort(-k);
fmt = fmt(i,:);
n = n(i);
key = key(i,:);
arg = i;

% open output file for writing
fp = fopen(filename,'w');


%
% write header to output file
%

for i = 1:length(k)

  v = eval(['v',int2str(arg(i))]);
  if iscellstr(v)
     v=char(v);
  end
  % latitude of longitude
  if strcmp(deblank(fmt(i,:)),'pos')

    [slat,slon] = pos2str([v,v]);

    % 90/92 hardcoded for latitude/end_lat in `rodbhead'
    if (k(i) == 90 | k(i) == 92)
      fprintf(fp,'%s = %s\n',key(i,:),slat);
    else
      fprintf(fp,'%s = %s\n',key(i,:),slon);
    end

  % date
  elseif strcmp(deblank(fmt(i,:)),'%d/%d/%d')
    fprintf(fp,'%s = %4d/%2.2d/%2.2d\n',key(i,:),v);

  % time
  elseif strcmp(deblank(fmt(i,:)),'%d:%d')
    % allow rodbload formatted times
    if length(v)==2
      v=v(1)+v(2)/60;
    end
    fprintf(fp,'%s = %2.2d:%2.2d\n',key(i,:),fix(v),fix(rem(v,1)*60));

  % columns
  elseif strcmp(deblank(fmt(i,:)),'col')
    fprintf(fp,'%s = %s\n',key(i,:),v);

  % anything else
  else
   
    fprintf(fp,['%s = ',fmt(i,:),'\n'],key(i,:),v);

  end

end


%
% write data matrix
%

eval(['data = v',num2str(i + 1),';'])

fprintf(fp,format,data');


% close output file
fclose(fp);





