function [out]=lagcorrcoefnan(x,x_time,y,y_time,lag);% LAGCORRCOEFNAN uses CORRCOEFNAN and accepts NaNs in data.% function [out]=lagcorrcoefnan(x,x_time,y,y_time,lag);% For corrcoef, NaNs are replaced by % linear interpolation in between and% nearest neighbour at the beginning/end (Columnwise).% Input: x  x_time  vector of measurements and their times.%        y  y_time  same for y; time spacing MUST BE THE SAME.%        lag  vector of time lag (unit: time spacings!)% Andreas Macrander, 17.4.2000.startx=x_time(1);starty=y_time(1);stopx=x_time(length(x_time));stopy=y_time(length(y_time));tminx_y=min(abs(x_time-starty));tminy_x=min(abs(y_time-startx));if(startx<=starty & stopx<=stopy) istartx=1; istarty=find(x_time-starty==tminx_y); total_length=istarty - 1 + length(y_time);elseif(startx>=starty & stopx>=stopy) istartx=find(y_time-startx==tminy_x); istarty=1; total_length=istartx - 1 + length(x_time);elseif(startx<=starty & stopx>=stopy) istartx=1; istarty=find(x_time-starty==tminx_y); total_length=length(x_time);else istartx=find(y_time-startx==tminy_x); istarty=1; total_length=length(y_time);endlagspan=lag(length(lag))-lag(1);lag1=lag(1);total_length_l=total_length+lagspan;matrix=ones(total_length_l,length(lag)+1);for i=1:length(x) matrix(istartx-lag1+i-1,1)=x(i);endfor i=1:length(y) for j=1:length(lag)  matrix(istarty-lag1+lag(j)+i-1,1+j)=y(i); endendout=corrcoefnan(matrix);%%%%%%%%%%%