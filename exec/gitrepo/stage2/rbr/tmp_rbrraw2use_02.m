% Basic preprocessing for RBR data once in rodb format.% features%      1. eliminate lauching and recovery period%      2. save data to rodb file%      3. create data overview sheet%% Required inputs:- %      moor - mooring name as string e.g. 'wb_1_200420'%% Optional inputs:-%      'procpath' - path of proc directory as string if not using standard paths%      'outpath' - as with inpath (otherwise default = directory function run from)%      'plot_interval' - vector of start and end date/time for plotting%                       '[startyyyy startmm startdd starthh; endyyyy endmm enddd endhh]' %                       need to include quote marks.%      'ctd' - indicates data is from a calibration ctd cast not a mooring%% example:% rbrraw2use_02('wb1_1_200420','procpath','/data/jrd/hydro10/rapid/data/moor/proc/','outpath','/data/jrd/hydro10/users/',..%'plot_interval','[2005 12 03 12 00; 2006 10 26 00 00)%% ..% rbrraw2use_02('ebhi_4_200720','procpath','/local/users/pstar/Data/rpdmoc/rapid/data/moor/proc/',..% 'outpath','/local/users/pstar/Data/rpdmoc/rapid/data/moor/proc/ebhi_4_200720/rbr/',..%'plot_interval','[2005 12 03 12 00; 2006 10 26 00 00)%% Outputs:- outfile - stage2 processed Idronaut data in rodb format %                     replace .raw extension with .use from infile%           % Uses the following functions:-%  rodbload, rodbsave, hms2h% v 02 - add graphics 5/2/07 DR.  function rbrraw2use_02(moor, varargin)% check for optional argumentsa=strmatch('procpath',varargin,'exact');if a>0    procpath=char(varargin(a+1));else    procpath='/noc/ooc/rpdmoc/rapid/data/moor/proc/';enda=strmatch('outpath',varargin,'exact');if a>0    outpath=char(varargin(a+1));else    outpath = './';enda=strmatch('plot_interval',varargin,'exact');if a>0    plot_interval=(varargin(a+1));    plot_interval=str2num(plot_interval{1});else    plot_interval=1; % automatically calculate laterenda=strmatch('ctd',varargin,'exact');if a>0    procpath=[procpath '/../proc_calib/'];    ctd=1;    cruise=input('Please select cruise:- \n1=CD170 or KN182\n2=CD177\n3=RB0602\n4=D304\n5=D334\n');    cruises={'cd170_kn182','cd177','rb0602','d304','d334'};    cruise=cruises{cruise};else    ctd=0;end% -- set path for data inputinpath  = [procpath '/' moor '/'];if ctd==1    inpath=[procpath cruise '/cal_dip/rbr/' moor '/'];end    % --- get moring information from infofile infofile =[procpath '/' moor '/' moor 'info.dat'];if ctd==1    infofile = [procpath cruise '/cal_dip/' moor 'info.dat'];end[id,sn,z,s_t,s_d,e_t,e_d,lat,lon,wd,mr]  =  rodbload(infofile,'instrument:serialnumber:z:Start_Time:Start_Date:End_Time:End_Date:Latitude:Longitude:WaterDepth:Mooring');ii = find(id == 330);  % 330 is id number for RBRssn = sn(ii);z  = z(ii);[z,zx] = sort(z);  % sort instruments by their depthsn     = sn(zx);[gash, operator]=system('whoami');  % This line will not work if run from a PC. May need to edit it out.fid_stat= fopen([outpath,moor,'_rbr_stage2_log'],'w');fprintf(fid_stat,'Processing steps taken by rbrraw2use_02.m:\n');fprintf(fid_stat,'  1. eliminate lauching and recovery period\n');fprintf(fid_stat,'  2. save data to rodb file\n');fprintf(fid_stat,'  3. create data overview sheet\n');  fprintf(fid_stat,'\n Operated by: %s  on %s\n',operator,datestr(clock)); fprintf(fid_stat,['        RBR in Mooring ',moor,'\n\n\n']);fprintf(fid_stat,'      SN   Depth Start        End          Cycles    Gaps  Mean    STD     Max     Min\n');          dummy    = -9999;%-----------------------------------------% --- preprocessing loop -------------------% ----------------------------------------jd_s  = julian(s_d(1),s_d(2),s_d(3),s_t(1)+s_t(2)/60);  % start timejd_e  = julian(e_d(1),e_d(2),e_d(3),e_t(1)+e_t(2)/60);  % end timefor proc = 1 : length(sn),  infile  = [inpath,'rbr/',moor,'_',sprintf('%d',sn(proc)),'.raw'];  if ctd==1      infile=[inpath moor '_' sprintf('%d',sn(proc)) '.raw'];  end  pause  if exist(infile)   > 0      rodbfile= [moor,'_',sprintf('%d',sn(proc)),'.use'];     outfile = [outpath,rodbfile];    [YY,MM,DD,HH,P,T,C] = rodbload(infile,'YY:MM:DD:HH:P:T:C');        %------------------------------------------     %----- cut off launching and recovery period    %------------------------------------------    disp('cut off launching and recovery period')     jd               = julian(YY,MM,DD,HH);    ii               = find(jd <= jd_e & jd >= jd_s );    YY=YY(ii);MM=MM(ii);DD=DD(ii);HH=HH(ii);C=C(ii);T=T(ii);P=P(ii);    jd  = jd(ii);         cycles     = length(ii);    Start_Date = [YY(1) MM(1) DD(1)];    Start_Time = HH(1);    End_Date = [YY(cycles) MM(cycles) DD(cycles)];    End_Time = HH(cycles);             % -----------------------------------------    % ---  basic statistics -------------------    % -----------------------------------------       Tm = nanmean(T);    Cm = nanmean(C);    Pm = nanmean(P);        Tsd = nanstd(T);    Csd = nanstd(C);    Psd = nanstd(P);        Tmx = max(T); Tmn = min(T);    Cmx = max(C); Cmn = min(C);    Pmx = max(P); Pmn = min(P);            %------------------------------------------    %---- fill time gaps  with dummy    %------------------------------------------    disp(' fill time gaps  with dummy')    djd = diff(jd);           % time step      sr  = median(djd);        % sampling interval    ii  = find(djd > 1.5*sr);  % find gaps    gap = round(djd(ii)/sr)-1;    addt= [];     for i = 1 : length(gap),       addt = [addt; [[1:gap(i)]*sr + jd(ii(i))]'];    end     [jd,xx] = sort([jd; addt]);   % add time    ngap    = length(addt);       % number of time gaps             gt      = gregorian(jd);    YY=gt(:,1); MM=gt(:,2); DD=gt(:,3);     if size(gt,2) == 6       HH=hms2h(gt(:,4),gt(:,5),gt(:,6));     else        HH= gt(:,4);    end                  T = [T;dummy*ones(ngap,1)]; T = T(xx);    C = [C;dummy*ones(ngap,1)]; C = C(xx);     P = [P;dummy*ones(ngap,1)]; P = P(xx);        %-----------------------------------------------------    %  write output to logfile ---------------------------    %-----------------------------------------------------    disp(' write output to logfile')               fprintf(fid_stat,'T     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Tm,Tsd,Tmx,Tmn');     fprintf(fid_stat,'C     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Cm,Csd,Cmx,Cmn');     fprintf(fid_stat,'P     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Pm,Psd,Pmx,Pmn');          fprintf(fid_stat,'\n');    %-----------------------------------      %--- write data to rodb format -----    %-----------------------------------    disp(['writing data to ',outfile])              fort = '%4.4d  %2.2d  %2.2d  %7.5f  %6.4f  %6.4f  %6.4f';    cols = 'YY:MM:DD:HH:T:C:P';    rodbsave(outfile,...       'Latitude:Longitude:Columns:Start_Date:Start_Time:SerialNumber:Mooring:WaterDepth:Instrdepth:End_Date:End_Time',...       fort,...       lat,lon,cols,Start_Date,Start_Time,sn(proc),mr,wd,z(proc),End_Date,End_Time,...       [YY MM DD HH T C P]);   % -----------------------% GRAPHICS% -----------------------    if plot_interval==1 % automatically calculated plot interval if not in optional arguments        plot_interval = [s_d(1) s_d(2) s_d(3) s_t(1);   % start time of time axis on plot            e_d(1) e_d(2) e_d(3) e_t(1)+1];  % end time of time axis on plot    end        if z==0        z=' CTD cast ';    else        z=num2str(z);    end    jd1 = julian(plot_interval(1,:));    jd2 = julian(plot_interval(2,:));    figure(1);clf    subplot(3,1,1);     plot(jd-jd1,T)    title(['RBR s/n: ',num2str(sn(proc)), ...                    '; Target Depth: ',z,'; ',moor])    ylabel('Temperature [deg C]')    grid on    if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    subplot(3,1,2)    plot(jd-jd1,C)    ylabel('Conductivity [mS/cm]')    grid on    if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    subplot(3,1,3);    plot(jd-jd1,P)    ylabel('Pressure [dbar]')    grid on     if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    eval(['print -dps ',outfile,'.ps'])    sampling_rate = 1/median(diff(jd));    tf            = auto_filt(T, sampling_rate, 1/2,'low',4);    cf            = auto_filt(C, sampling_rate, 1/2,'low',4);    pf            = auto_filt(P, sampling_rate, 1/2,'low',4);    figure(2);clf    subplot(3,1,1);     plot(jd-jd1,tf)    title(['Idronaut s/n: ',num2str(sn(proc)), ...                    '; Target Depth: ',z])    ylabel('Temperature [deg C]')    grid on    if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    subplot(3,1,2)    plot(jd-jd1,cf)    ylabel('Conductivity [mS/cm]')    grid on    if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    subplot(3,1,3);    plot(jd-jd1,pf)    ylabel('Pressure [dbar]')    grid on     if z~=0        xlim([0 jd2-jd1])        timeaxis(plot_interval(1,1:3));       end    eval(['print -dps ',outfile,'_lowpass.ps'])      endendfclose(fid_stat);