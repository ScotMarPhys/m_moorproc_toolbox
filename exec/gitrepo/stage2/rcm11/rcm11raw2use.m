% Basic preprocessing for RCM11 data once in rodb format.% features%      1. eliminate lauching and recovery period%      2. save data to rodb file%      3. create data overview sheet%% Required inputs:- %      moor - mooring name as string e.g. 'wb_1_200420'%% Optional inputs:-%      'procpath' - path of proc directory as string if not using standard paths%      'outpath' - as with inpath (otherwise default = directory function run from)%% example:% rcm11raw2use('wb1_1_200420','procpath','/data/jrd/hydro10/rapid/data/moor/proc/','outpath','/data/jrd/hydro10/users/')%% Outputs:- outfile - stage2 processed RCM11 data in rodb format %                     replace .raw extension with .use from infile%           % Uses the following functions:-%  rodbload, rodbsave, hms2h  function rcm11raw2use(moor, varargin)%operator = 'Paul Wright';% check for optional argumentsa=strmatch('procpath',varargin,'exact');if a>0    procpath=char(varargin(a+1));else    procpath='/noc/users/pstar/rpdmoc/rapid/data/moor/proc/';    %procpath='/Users/hydrosea5/Desktop/RB1201/rapid/data/moor/proc/';enda=strmatch('outpath',varargin,'exact');if a>0    outpath=char(varargin(a+1));else    outpath = [procpath, moor,'/rcm/'];   %, '/rcm/'] ;end% -- set path for data inputinpath  = [procpath  moor '/rcm/'];disp(['outpath = ' outpath])disp(['inpath = ' inpath])% --- get moring information from infofile infofile =[procpath  moor '/' moor 'info.dat'];[id,sn,z,s_t,s_d,e_t,e_d,lat,lon,wd,mr]  =  rodbload(infofile,'instrument:serialnumber:z:Start_Time:Start_Date:End_Time:End_Date:Latitude:Longitude:WaterDepth:Mooring');ii = find(id == 310);  % 310 is id number for RCM11ssn = sn(ii);z  = z(ii);[z,zx] = sort(z);  % sort instruments by their depthsn     = sn(zx);[gash, operator]=system('whoami');  % This line will not work if run from a PC. May need to edit it out.fid_stat= fopen([outpath,moor,'_stage2_log'],'w');fprintf(fid_stat,'Processing steps taken by rcm11raw2use.m:\n');fprintf(fid_stat,'  1. eliminate lauching and recovery period\n');fprintf(fid_stat,'  2. save data to rodb file\n');fprintf(fid_stat,'  3. create data overview sheet\n');  fprintf(fid_stat,'\n Operated by: %s  on %s\n',operator,datestr(clock)); fprintf(fid_stat,['        RCM11 in Mooring ',moor,'\n\n\n']);fprintf(fid_stat,'      SN   Depth Start        End          Cycles    Gaps  Mean    STD     Max     Min\n');          dummy    = -9999;%-----------------------------------------% --- preprocessing loop -------------------% ----------------------------------------jd_s  = julian(s_d(1),s_d(2),s_d(3),s_t(1)+s_t(2)/60);  % start timejd_e  = julian(e_d(1),e_d(2),e_d(3),e_t(1)+e_t(2)/60);  % end timefor proc = 1 : length(sn),  infile  = [inpath, moor,'_',sprintf('%d',sn(proc)),'.raw'];  disp(['infile = ' infile])  if exist(infile)   > 0      rodbfile= [moor,'_',sprintf('%d',sn(proc)),'.use'];     outfile = [outpath,rodbfile];    [YY,MM,DD,HH,REF,U,V,T,C,P,TLT,MSS] = rodbload(infile,'YY:MM:DD:HH:REF:U:V:T:C:P:TLT:MSS');        %------------------------------------------     %----- cut off launching and recovery period    %------------------------------------------    disp('cut off launching and recovery period')     jd               = julian(YY,MM,DD,HH);    ii               = find(jd <= jd_e & jd >= jd_s );    YY=YY(ii);MM=MM(ii);DD=DD(ii);HH=HH(ii);REF=REF(ii);C=C(ii);T=T(ii);TLT=TLT(ii);U=U(ii);V=V(ii);MSS=MSS(ii);P=P(ii);    jd  = jd(ii);         cycles     = length(ii);    Start_Date = [YY(1) MM(1) DD(1)];    Start_Time = HH(1);    End_Date = [YY(cycles) MM(cycles) DD(cycles)];    End_Time = HH(cycles);             % -----------------------------------------    % ---  basic statistics -------------------    % -----------------------------------------       Tm = nanmean(T);    Cm = nanmean(C);    Um = nanmean(U);    Vm = nanmean(V);    Pm = nanmean(P);    TLTm = nanmean(TLT);    MSSm = nanmean(MSS);        Tsd = nanstd(T);    Csd = nanstd(C);    Usd = nanstd(U);    Vsd = nanstd(V);    Psd = nanstd(P);    TLTsd = nanstd(TLT);    MSSsd = nanstd(MSS);        Tmx = max(T); Tmn = min(T);    Cmx = max(C); Cmn = min(C);    Umx = max(U); Umn = min(U);    Vmx = max(V); Vmn = min(V);    Pmx = max(P); Pmn = min(P);    TLTmx = max(TLT); TLTmn = min(TLT);    MSSmx = max(MSS); MSSmn = min(MSS);            %------------------------------------------    %---- fill time gaps  with dummy    %------------------------------------------    disp(' fill time gaps  with dummy')    djd = diff(jd);           % time step      sr  = median(djd);        % sampling interval    ii  = find(djd > 1.5*sr);  % find gaps    gap = round(djd(ii)/sr)-1;    addt= [];     for i = 1 : length(gap),       addt = [addt; [[1:gap(i)]*sr + jd(ii(i))]'];    end     [jd,xx] = sort([jd; addt]);   % add time    ngap    = length(addt);       % number of time gaps             gt      = gregorian(jd);    YY=gt(:,1); MM=gt(:,2); DD=gt(:,3);     if size(gt,2) == 6       HH=hms2h(gt(:,4),gt(:,5),gt(:,6));     else        HH= gt(:,4);    end                  T = [T;dummy*ones(ngap,1)]; T = T(xx);    C = [C;dummy*ones(ngap,1)]; C = C(xx);     U = [U;dummy*ones(ngap,1)]; U = U(xx);    V = [V;dummy*ones(ngap,1)]; V = V(xx);    P = [P;dummy*ones(ngap,1)]; P = P(xx);    TLT = [TLT;dummy*ones(ngap,1)]; TLT = TLT(xx);    MSS = [MSS;dummy*ones(ngap,1)]; MSS = MSS(xx);    REF = [REF;dummy*ones(ngap,1)]; REF = REF(xx);        %-----------------------------------------------------    %  write output to logfile ---------------------------    %-----------------------------------------------------    disp(' write output to logfile')               fprintf(fid_stat,'T     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Tm,Tsd,Tmx,Tmn');     fprintf(fid_stat,'C     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Cm,Csd,Cmx,Cmn');     fprintf(fid_stat,'U     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Um,Usd,Umx,Umn');     fprintf(fid_stat,'V     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Vm,Vsd,Vmx,Vmn');     fprintf(fid_stat,'P     %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,Pm,Psd,Pmx,Pmn');      fprintf(fid_stat,'TLT   %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,TLTm,TLTsd,TLTmx,TLTmn');     fprintf(fid_stat,'MSS   %d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d     %d     %5.2f   %5.2f   %5.2f   %5.2f \n',...               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,MSSm,MSSsd,MSSmx,MSSmn');     fprintf(fid_stat,'\n');    %-----------------------------------      %--- write data to rodb format -----    %-----------------------------------    disp(['writing data to ',outfile])              fort = '%4.4d  %2.2d  %2.2d  %7.5f  %3.0f  %7.4f  %7.4f  %6.4f  %6.4f  %5.1f  %3.2f  %3.2f';    cols = 'YY:MM:DD:HH:REF:U:V:T:C:P:TLT:MSS';    rodbsave(outfile,...       'Latitude:Longitude:Columns:Start_Date:Start_Time:SerialNumber:Mooring:WaterDepth:Instrdepth:End_Date:End_Time',...       fort,...       lat,lon,cols,Start_Date,Start_Time,sn(proc),mr,wd,z(proc),End_Date,End_Time,...       [YY MM DD HH REF U V T C P TLT MSS]);  endendfclose(fid_stat);