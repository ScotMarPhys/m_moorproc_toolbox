function  [pr_int,pr_exfit,t_int,jd_grid,pr_linfit,coef_exfit,coef_linfit] = purge_bp_003(sr,jd,P,T,moor_interval,log)%  [pr_int,pr_exfit,t_tint,jd_grid,pr_linfit,coef_exfit,coef_linfit] = ...%       purge_bp(sr,jd,P,T,moor_interval,log)%% perform basic checks on the pressure data %%  input %    sr  ---- sampling rate (per day)%    jd  ---- julian day%    P   ---- pressure [dbar]%    T   ---- Temperature [deg C]%    moor_interval --- 2 element vector: start and end time of %                      mooring operation [julian days]  %    t_offset      --- 2 element vector: t_sensor - t_utc prior %                      and after deployment [seconds]%    fid           --- file identy%    [cut_off]     --- Eliminate the first 'cut_off' days from the pressure %                      record, which is commonly exhibits strong drift when %                      the pressure sensor is not equilibrated. If omitted,%                      cut_off = 0 is used%                       %% %  output%  pr_int   ----- despike interpolated data %  pr_exfit ----- exponential - linear fit to pressure data%  t_int    ----- interpolated temperature%  jd_grid  ----- julian day grid%  pr_linfit ---- linear fit to pressure data%  coef_exfit --- the coefficients for the exponential-linear fit%  coef_linfit -- the coefficients for the linear fit%% uses ddspike.m, julian.m, auto_filt.m exp_lin_fit_2.m%% Kanzow, 16.03.05% Z Szuts, 14.11.08% EFW, 04/30/2014 - commented out the call to ddspike since it was% crashing and WBP1 recovered on jc103 didn't have spikes.global cut_off_GLOBALdum = 0; % dummycut_off_select = 'n';if nargin ==6  cut_off_select = 'y';end hf=[]; % variable to hold figure handles, for closing at end of script% -- parameters for despiking pytol        = [-1.8 1.8]; pstddy_tol   = 6; nloop        = 3; % adjust parameters for ebp2_1_200565, which is selected by% deployment/recovery dates% this step change is better fixed in pies_processing_002.m% ZB Szuts, D344, 24.10.2009 16:50if 1==0 % moor_interval(1)>julian(2005,11,20,11+3.5/60) & moor_interval(1)<julian(2005,11,20,11+4.5/60) & moor_interval(2)<julian(2009,10,24,8+0.5/60) & moor_interval(2)>julian(2009,10,24,7+59.5/60)    pytol        = [-4 1.8];    pstddy_tol   = 6;    nloop        = 3;end% -- parameters for filtering co           = 1/2; % cutoff    [per day]% ---- correct clock offset ----%% t_offset =  input('purge_bp_003.m: Enter clock offset [seconds] Sensor-UTC prior and after deployment: ');%% if isempty(t_offset)%%    t_offset = [0 0];%% end%% fprintf(log,'purge_bp_003.m: Clock offset [%3d %3d] s removed\n',t_offset);%% t_offset = t_offset/86400; % s --> d%% if ~isempty(find(t_offset ~= 0))%%   len      = length(jd);%%   t_offset = linspace(t_offset(1),t_offset(2),len)';%%   jd       = jd - t_offset;%% end %% ---- compute p_offset ----- launch     = find(jd < moor_interval(1)); if isempty(launch)   p_offset = 0;   fprintf(log,'purge_bp_003.m: Pressure offset could not be calculated\n');   disp('purge_bp_003.m: Pressure offset could not be calculated'); else   p_offset   = median(P(launch)); end  disp(['purge_bp_003.m: Estimated pressure Offset: ',num2str(p_offset),' dbar']) apply = input('Should this offset be removed from the record?: y/n ','s'); if strcmp(apply,'y')   P          = P - p_offset;     fprintf(log,'purge_bp_003.m: Pressure offset of %5.2f dbar removed\n', ...                                                           p_offset);   fprintf(1,'purge_bp_003.m: Pressure offset of %5.2f dbar removed\n', ...                                                           p_offset); else   fprintf(log,'purge_bp_003.m: Pressure offset of %5.2f dbar NOT removed\n', ...                                                           p_offset);   fprintf(1,'purge_bp_003.m: Pressure offset of %5.2f dbar NOT removed\n', ...                                                           p_offset);       hf(end+1) = figure(900);   plot(jd(launch)-jd(1),P(launch))     ylabel('Pressure [dbar]');xlabel('Time [days]') end% ---- cut off launch and recovery periods --- operation = find(jd<=moor_interval(2) & jd>= moor_interval(1)); hf(end+1) = figure(901); hold off plot(jd(operation)-jd(operation(1)),P(operation)) grid on   drawnow cut_off_select  if strcmp(cut_off_select,'y')    cut_off_GLOBAL= input('Select cut off time [days] at beginning of time series from figure 901: '); end operation = find(jd<=moor_interval(2) & jd>= moor_interval(1)+cut_off_GLOBAL);  P         = P(operation); T         = T(operation);  jd        = jd(operation); fprintf(log,'purge_bp_003.m: Operation interval: %s  to  %s\n', ...          datestr(gregorian(jd(1))),datestr(gregorian(jd(end)) ));% ---- remove dummy values, edited efw jc103, 2014/04/30P(find(P==dum))=NaN;% --- despike ------------------% efw removed the despiking for jc103, WBP1 since it threw errors and there% were no apparent spikes.2% The despiking section (the next three active lines of code) was reinstated % at the end of JC103, but only after these comments were found buried in a % subfunction and only after all BPRs recovered on the cruise had been % processed! These may need reprocessing if there are spikes present but % not right now....% SKYE note that the despiking acts to remove the recovery period[Pd,dx,ndx] = ddspike(P,pytol,pstddy_tol,[nloop],'y',dum);fprintf(log,'purge_bp_003.m: %d spikes removed\n',ndx);Pd = P;% --- interpolate + filter -------------------- valI        = find(Pd ~= dum&~isnan(Pd)); jd_grid     = ceil(jd(valI(1))*1440)/1440:1/sr:floor(jd(valI(length(valI)))*1440)/1440; % time grid (onto which jd is interpolated on) is rounded to integer minutes  pr_int      = interp1(jd(valI),Pd(valI),jd_grid); % pressure pr_filt     = auto_filt(pr_int,sr,co,'low',4); fprintf(log,'purge_bp_003.m: Linear interpolation with sampling rate %d per day\n',sr); t_int       = interp1(jd(valI),T(valI),jd_grid); % temperature  % -- empirical drift estimation for pressure hf(end+1) = figure(100);  plot(jd_grid,pr_filt)  grid on try  %%while 1  %%  disp(['Exponential-linear fit: c(1)*(1-exp(-c(2)*t) + coeff(3)*t + c(4)'])  %%   first_guess=input(['Input first guess for coefficients of exp-lin fit']);  %%  if length(first_guess) == 4  %%    break  %%  else   %%    disp(['Entry must be 4 element vector'])  %%  end         %% end  [exfit_coef,pr_exfit]  = exp_lin_fit2(jd_grid,pr_int,[1 0.05 0.005 median(pr_int)]);  coef_exfit = exfit_coef;  catch  lasterr  pr_exfit = NaN;endlinfit_coef            = polyfit(jd_grid-jd_grid(1),pr_int,1);pr_linfit              = polyval(linfit_coef,jd_grid-jd_grid(1));coef_linfit            = linfit_coef;%%% --- spectral estimate of pressure%%[spec,coh95,fs] = spectrum_tm(pr_int-pr_exfit,5,length(pr_int)*2,5,10,sr);% _----- graphics -------------------------hf(end+1) = figure(1); subplot(2,1,1) hold off plot(jd_grid-jd(1),pr_int,'b') xlabel('time [days]') ylabel('pressure [dbar]') subplot(2,1,2) hold off plot(jd_grid-jd(1),t_int,'b') xlabel('time [days]') ylabel('pressure [dbar]') hf(end+1) = figure(3); hold off plot(jd_grid-jd(1),pr_filt,'b') hold on if ~isnan(pr_exfit)    plot(jd_grid-jd(1),pr_exfit,'g--')    plot(jd_grid-jd(1),pr_linfit,'m--')    legend('pressure (2 day low-pass)','exp.-lin. fit','lin. fit',2) else     plot(jd_grid-jd(1),pr_linfit,'m--')     legend('pressure (2 day low-pass)','lin. fit',2)  end    grid on%ylim([min(pr_filt) max(pr_filt)])xlabel('time [days]')ylabel('pressure [dbar]')%title(['mooring ',loc,'   sensor id ',sprintf('%3.3d',id)])legend('pressure (2 day low-pass)','exp.-lin. fit','lin. fit',2) close(hf) 