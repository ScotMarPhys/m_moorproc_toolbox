function  [pr_int,pr_exfit,t_int,jd_grid] =purge_bp(sr,jd,P,T,moor_interval,log,cut_off)  %  [pr_int,pr_exfit,t_tint,jd_grid] = purge_bp(sr,jd,P,T,moor_interval,log,[cut_off])%% perform basic checks on the pressure data %%  input %    sr  ---- sampling rate (per day)%    jd  ---- julian day%    P   ---- pressure [dbar]%    T   ---- Temperature [deg C]%    moor_interval --- 2 element vector: start and end time of %                      mooring operation [julian days]  %    t_offset      --- 2 element vector: t_sensor - t_utc prior %                      and after deployment [seconds]%    fid           --- file identy%    [cut_off]     --- Eliminate the first 'cut_off' days from the pressure %                      record, which is commonly exhibits strong drift when %                      the pressure sensor is not equilibrated. If omitted,%                      cut_off = 0 is used%                       %% %  output%  pr_int   ----- despike interpolated data %  pr_exfit ----- exponential - linear fit%  jd_grid  ----- julian day grid%% uses ddspike.m, julian.m, auto_filt.m exp_lin_fit_2.m%% Kanzow, 16.03.05dum = -9999; % dummycut_off_select = 'n';if nargin ==6  cut_off_select = 'y';end % -- parameters for despiking pytol        = [-1.8 1.8]; pstddy_tol   = 6; nloop        = 3; % -- parameters for filtering co           = 1/2; % cutoff    [per day]% ---- correct clock offset ----%% t_offset =  input('purge_bp.m: Enter clock offset [seconds] Sensor-UTC prior and after deployment: ');%% if isempty(t_offset)%%    t_offset = [0 0];%% end%% fprintf(log,'purge_bp.m: Clock offset [%3d %3d] s removed\n',t_offset);%% t_offset = t_offset/86400; % s --> d%% if ~isempty(find(t_offset ~= 0))%%   len      = length(jd);%%   t_offset = linspace(t_offset(1),t_offset(2),len)';%%   jd       = jd - t_offset;%% end %% ---- compute p_offset ----- launch     = find(jd < moor_interval(1)); if isempty(launch)   p_offset = 0;   fprintf(log,'purge_bp.m: Pressure offset could not be calculated\n');   disp('purge_bp.m: Pressure offset could not be calculated'); else   p_offset   = median(P(launch)); end %%keyboard  disp(['purge_bp.m: Estimated pressure Offset: ',num2str(p_offset),' dbar']) apply = input('Should this offset be removed from the record?: y/n ','s'); if strcmp(apply,'y')   P          = P - p_offset;     fprintf(log,'purge_bp.m: Pressure offset of %5.2f dbar removed\n',p_offset);   fprintf(1,'purge_bp.m: Pressure offset of %5.2f dbar removed\n',p_offset); else   fprintf(log,'purge_bp.m: Pressure offset of %5.2f dbar NOT removed\n',p_offset);   fprintf(1,'purge_bp.m: Pressure offset of %5.2f dbar NOT removed\n',p_offset);     figure(900) plot(jd(launch)-jd(1),P(launch))   ylabel('Pressure [dbar]');xlabel('Time [days]') end% ---- cut off launch and recovery periods --- operation = find(jd<=moor_interval(2) & jd>= moor_interval(1)); figure(901);hold off plot(jd(operation)-jd(operation(1)),P(operation)) grid on   drawnow if strcmp(cut_off_select,'y')    cut_off= input('Select cut off time [days] at beginning of time series from figure 901 '); end operation = find(jd<=moor_interval(2) & jd>= moor_interval(1)+cut_off);  P         = P(operation); T         = T(operation);  jd        = jd(operation); fprintf(log,'purge_bp.m: Operation interval: %s  to  %s\n',datestr(gregorian(jd(1))),datestr(gregorian(jd(end)) ));% --- despike ------------------ [Pd,dx,ndx] = ddspike(P,pytol,pstddy_tol,[nloop],'y',dum); fprintf(log,'purge_bp.m: %d spikes removed\n',ndx);% --- interpolate + filter -------------------- valI        = find(Pd ~= dum); jd_grid     = ceil(jd(valI(1))*1440)/1440:1/sr:floor(jd(valI(length(valI)))*1440)/1440; % time grid (onto which jd is interpolated on) is rounded to integer minutes  pr_int      = interp1(jd(valI),Pd(valI),jd_grid); % pressure pr_filt     = auto_filt(pr_int,sr,co,'low',4); fprintf(log,'purge_bp.m: Linear interpolation with sampling rate %d per day\n',sr); t_int       = interp1(jd(valI),T(valI),jd_grid); % temperature  % -- empirical drift estimation for pressure figure(100)  plot(jd_grid,pr_filt)  grid on try  %%while 1  %%  disp(['Exponential-linear fit: c(1)*(1-exp(-c(2)*t) + coeff(3)*t + c(4)'])  %%   first_guess=input(['Input first guess for coefficients of exp-lin fit']);  %%  if length(first_guess) == 4  %%    break  %%  else   %%    disp(['Entry must be 4 element vector'])  %%  end         %% end  [exfit_coef,pr_exfit]  = exp_lin_fit2(jd_grid,pr_int,[1 1 1 1]);catch  lasterr  pr_exfit = NaN;endlinfit_coef            = polyfit(jd_grid-jd_grid(1),pr_int,1);pr_linfit              = polyval(linfit_coef,jd_grid-jd_grid(1));%%% --- spectral estimate of pressure%%[spec,coh95,fs] = spectrum_tm(pr_int-pr_exfit,5,length(pr_int)*2,5,10,sr);% _----- graphics -------------------------figure(1) subplot(2,1,1) hold off plot(jd_grid-jd(1),pr_int,'b') xlabel('time [days]') ylabel('pressure [dbar]') subplot(2,1,2) hold off plot(jd_grid-jd(1),t_int,'b') xlabel('time [days]') ylabel('pressure [dbar]')figure(3) hold off plot(jd_grid-jd(1),pr_filt,'b') hold on if ~isnan(pr_exfit)    plot(jd_grid-jd(1),pr_exfit,'g--')    plot(jd_grid-jd(1),pr_linfit,'m--')    legend('pressure (2 day low-pass)','exp.-lin. fit','lin. fit',2) else     plot(jd_grid-jd(1),pr_linfit,'m--')     legend('pressure (2 day low-pass)','lin. fit',2)  end    grid onylim([min(pr_filt) max(pr_filt)])xlabel('time [days]')ylabel('pressure [dbar]')%title(['mooring ',loc,'   sensor id ',sprintf('%3.3d',id)])legend('pressure (2 day low-pass)','exp.-lin. fit','lin. fit',2)%%figure(3)%%loglog(1./fs,spec)%%title(['mooring ',loc,'   sensor id ',sprintf('%3.3d',id)])%%ylabel(['spectral density'])%%xlabel('period')