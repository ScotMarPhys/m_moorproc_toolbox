% Process travel time and pressure data from PIES%% processing of pies bottom pressure data / % -- despike% -- apply drift fit%% PIES Travel Time Processing% a) data is smoothed by calculating hourly medians of each of the channels% b) hourly median from the channel% c) data is low-pass filtered  %% uses  purge_bp.m, auto_filt.m, VERIFY THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!%% 04/11/08 Szuts: this processing file based on%   seagauge_processing_002.m and pies_processing.m, and ttproc.m% clear allclose all% jym 22 April 2005: Request to all operators who change path names % for development purposes -% PLEASE change them back to work on the common computer, so that we do% not have to reinvent the changes over and over again.%mooring       = 'ebp1_1_200564';cruise        = 'd334';operator      = 'zszuts';programme     = 'pies_processing_002.m';basedir     = '/local/users/pstar/Data/rpdmoc/rapid/data/';inpath      = [basedir 'moor/proc/' mooring '/pies/'];outpath     = [basedir 'moor/proc/' mooring '/pies/'];infofile    = [basedir 'moor/proc/' mooring '/' mooring 'info.dat'];clock_file  = [basedir 'moor/raw/d334/clock_offset.dat'];plot_interval = [2005 11 1 0;   % start time of time axis on plot                 2008 11 1 0];  % end time of time axis on plotpies_id       = 316 ;         % pies iddummy         = -9999; % dummy value% --- load infodat -----------outvars = ['Latitude:Longitude:WaterDepth:StartDate:StartTime:'...           'EndDate:EndTime:z:instrument:serialnumber'];[lat,lon,wd,sdate,stime,edate,etime,z,type,serialnumber] = ...    rodbload(infofile,outvars);pI  = find(type==pies_id);sn  = serialnumber(pI);if length(sn)>1  error(['only one PIES instrument per mooring is expected, not '...         num2str(length(sn))])endlogfile       = [outpath 'stage2_log'];fidlog        = fopen(logfile,'w');fprintf(fidlog,'Stage 2 processing of PIES \n data  from mooring %s \n Date: %s \n',...        mooring,datestr(clock)');fprintf(fidlog,['Operator: %s\n' operator]);fprintf(fidlog,['Programme: %s\n' programme]);% ------ data input file and log fileinfile  = [inpath mooring '_' sprintf('%3.3d',sn) '.raw'];rodbfile= [mooring '_' sprintf('%3.3d',sn) '.use'];outfile = [outpath rodbfile];if exist(infile,'file') ~= 2   disp(['pies rodb file:  ' infile ' does not exist'])   returnendif exist(outfile,'file') == 2   disp(['outfile:  ' outfile ' already exists!!'])     overwrite =  input('Overwrite y/n  ','s');    if overwrite ~='y'     disp('data conversion stop')     return   endenddisp(['PIES ',num2str(serialnumber),' has been found'])fprintf(fidlog,'Serialnumber %d \n',serialnumber);fprintf(fidlog,'Infile %s \n',infile);fprintf(fidlog,'Outfile %s \n',outfile);[YY,MM,DD,HH,TT1,TT2,TT3,TT4,T,P] = ...    rodbload(infile,'YY:MM:DD:HH:TT1:TT2:TT3:TT4:T:P');jd = julian(YY,MM,DD,HH);% -------check data ----------------sampling_rate = round(1./median(diff(jd))); % nominal sampling rate [per day] time_corr = input(['Shall time be corrected for clock offset? y/n '],'s');if strcmp(time_corr,'y')  if exist(clock_file,'file')    disp('clock offset file exists - add in code to apply offset!')    keyboard        % old code from seagauge_processing_002.m    eval(['load ',clock_file])    ins = find(serialnumber == bpr_clock_offset(:,2) & ...               pies_id      == bpr_clock_offset(:,1));    if isempty(ins)      fprintf(1,['Clock offset not found in %s'],clock_file);      fprintf(fidlog,['Clock offset not found in %s \n'],clock_file);    else       coff= bpr_clock_offset(ins,3);    end  else    coff = input('Enter post deployment clock offset [s] from log sheet ');  end    disp(['Applying post recovery clock offset correction of ',...        num2str(coff),' seconds (rel. UTC)']);   fprintf(fidlog,'Post recovery clock offset of %d s subtracted \n',coff);    disp('verify that the sign of clock offset is applied correctly!!!')  keyboard  len  = length(jd);  coff = linspace(0,coff/86400,len); % assume linear clock drift  jd   = jd - coff';  % subtract driftendjd_start = julian([sdate' hms2h([stime;0]')']);jd_end   = julian([edate' hms2h([etime;0]')']);if 1==1 % code from seagauge_processing_002.m      [pr_int,pr_exfit,t_int,jd_grid,pr_linfit] =  ...       purge_bp(sampling_rate,jd,P,T,[jd_start jd_end],fidlog);  close all  %------------ graphics ------------------------  jd0 = julian(-1,1,1,24);  jd1 = julian(plot_interval(1,:))-jd0;  jd2 = julian(plot_interval(2,:))-jd0;   figure(21);clf  subplot(2,1,1); ii = find(~isnan(pr_int) & pr_int~=dummy);  plot(jd_grid(ii)-jd0,pr_int(ii))  title(['PIES s/n: ',num2str(serialnumber),...         '; Target Depth: ',num2str(z)])  ylabel('Pressure [dbar]')  grid on  xlim([jd1 jd2])  %timeaxis(plot_interval(1,1:3));     datetick('x',12)  subplot(2,1,2); ii = find(~isnan(t_int) & t_int~=dummy);  plot(jd_grid(ii)-jd0,t_int(ii))  ylabel('Temperature [deg C]')  grid on  xlim([jd1 jd2])  %   timeaxis(plot_interval(1,1:3));     orient tall  datetick('x',12)  eval(['print -depsc ',outfile,'.1.eps'])   figure(22);clf     % 2 day low pass  subplot(3,1,1); ii = find(~isnan(pr_int) & pr_int~=dummy);  plot(jd_grid(ii)-jd0,auto_filt(pr_int(ii),sampling_rate,1/2,'low',4))  hold on  plot(jd_grid-jd0,pr_exfit,'r')  plot(jd_grid-jd0,pr_linfit,'g')  legend('data','exp.-lin. fit','lin fit')  title(['PIES s/n: ',num2str(serialnumber),...         '; Target Depth: ',num2str(z),' 2-day low pass'])  ylabel('Pressure [dbar]')  grid on  xlim([jd1 jd2])  %    timeaxis(plot_interval(1,1:3));     datetick('x',12)  %----- decide whether exponential or linear fit is more apropriate  disp('Which empirical fit (figure 22) should be stored?')  fit_select = input('  (1) exponential-linear  or  (2) linear : ');  if fit_select == 1    fprintf(fidlog,'Exponential-linear pressure fit stored with data \n');    fprintf(1,'Exponential-linear pressure fit stored with data \n');    pfit = pr_exfit;  elseif fit_select == 2    fprintf(fidlog,'Linear pressure fit stored with data \n');    fprintf(1,'Linear pressure fit stored with data \n');    pfit = pr_linfit;  end   % - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - -   subplot(3,1,2);   plot(jd_grid(ii)-jd0,auto_filt(pr_int(ii),sampling_rate,1/2,'low',4)-pfit)  title('Empirical drift estimate subtracted')   ylabel('Pressure [dbar]')  grid on  xlim([jd1 jd2])  %    timeaxis(plot_interval(1,1:3));     datetick('x',12)  subplot(3,1,3); ii = find(~isnan(t_int) & t_int~=dummy);  plot(jd_grid(ii)-jd0,auto_filt(t_int(ii),sampling_rate,1/2,'low',4))  ylabel('Temperature [deg C]')  grid on  xlim([jd1 jd2])  %    timeaxis(plot_interval(1,1:3));     datetick('x',12)  orient tall  %eval(['print -depsc ',outfile,'.2.eps'])   keyboardelseif 1==0 % code from pies_processing.m  % -- parameters for despiking  pytol        = [-.5 .5];  pstddy_tol   = 6;   tytol        = [-5 5];  tstddy_tol   = 6;   nloop       = 3;  dum         = -9999;  %sr          = 48;  % samling/interpolation rate [per day]  sr          = sampling_rate;  % sampling/interpolation rate [per day], 144 for pies  co          = 1/2; % cutoff    [per day]         co2         = 1/30;   time_basep  = 24:length(jd)-200;  time_basep  = 62:length(jd)-1; % for PIES ebp1_1_200564    time_corr = 0; % already added in  jd          = jd(time_basep) - time_corr;  P           = P(time_basep);  % P already in dbar  T           = T(time_basep);  [pd,dxp,ndxp] = ddspike(P,pytol,pstddy_tol,[nloop],'y',dum);  [td,dxt,ndxt] = ddspike(T,tytol,tstddy_tol,[nloop],'y',dum);  %valI        = find(pd ~= dum);  valI        = setxor(1:length(pd),dxp);  jd_grid     = jd(valI(1)):1/sr:jd(valI(length(valI)));  pr_int      = interp1(jd(valI),pd(valI),jd_grid); % pressure  pr_filt     = auto_filt(pr_int,sr,co);  % gives odd results with pies data  %pr_filt2    = auto_filt(pr_int,sr,co2,'low',4);  pr_filt2    = auto_filt(pr_int,sr,co2,'low',2);   valI        = find(td ~= dum);  %ii          = find(diff(jd(valI))>0);  t_int       = interp1(jd(valI),td(valI),jd_grid);  % temperature  [exfit_coef,pr_exfit]  = exp_lin_fit2(jd_grid,pr_int,[1 1 1 1]);  linfit_coef            = polyfit(jd_grid,pr_int,1);  pr_linfit              = polyval(linfit_coef,jd_grid);   %eval(['save ',loc,'_pies.mat pr_int pr_filt  pr_filt2 pr_exfit pr_linfit exfit_coef linfit_coef t_int jd_grid programme'])    % ---- spectral estimate of pressure   %[spec,coh95,fs] = spectrum_tm(pr_int-pr_exfit,5,length(pr_int)*2,5,10,sr);  % ---- graphics ----------------------------   figure(1)  hold off  plot(jd_grid-jd(1),pr_filt,'b')  hold on   %% plot(jd_grid-jd(1),pf2,'r')  plot(jd_grid-jd(1),pr_exfit,'g--')  plot(jd_grid-jd(1),pr_linfit,'m--')  grid on  ylim([min(pr_filt) max(pr_filt)])  xlabel('time [days]')  ylabel('pressure [dbar]')  title(['mooring ' mooring '   PIES s/n ',sprintf('%3.3d',sn)])  legend('pressure (2 day low-pass)','exp.-lin. fit','lin. fit',2)  %eval(['print -dpsc pies_processing',loc,'P.psc'])  figure(2)  hold off  plot(jd_grid-jd(1),t_int,'b')  xlabel('time [days]')  ylabel('temperature [ \circ C]')  title(['mooring ' mooring '   PIES s/n ' sprintf('%3.3d',sn)])  grid on  %eval(['print -dpsc pies_processing',loc,'T.psc'])  %figure(3)  %loglog(1./fs,spec)  %title(['mooring ',loc,'   sensor id ',sprintf('%3.3d',id)])  %ylabel(['spectral density'])  %xlabel('period')  keyboardend % code from pies_processing.m%---- process travel time data% PIES Travel Time Processing% a) data is smoothed by calculating hourly medians of each of the channels% b) hourly median from the channel% c) data is low-pass filtered  % -- parameters --moor = 'v406_4';sr   = 6*24;co   = 1/2;outfile = [moor,'_TT.mat'];% -- load data ----if strcmp(moor,'v406_4')  load /data-so5/move_kanzow/me60_kanzow/mat_data/012_0.mat  lim =[6.64 6.7];  % basis despiking  002_21  good = 1:33936;     % cut off time jump near endelseif strcmp(moor,'v404_3')  load /data0-led/move_kanzow/so172_kanzow/mat_data/002_21.mat  lim =[6.578 6.59];  % basis despiking  002_21  good = 1:72678;     % cut off time jump near endelseif strcmp(moor,'v405_3')  load /data0-led/move_kanzow/so172_kanzow/mat_data/001_8.mat  lim = [6.602 6.61]; % basis despiking  001_8  good = 0;elseif strcmp(moor,'v406_3')  load /data0-led/move_kanzow/so172_kanzow/mat_data/012_4.mat  lim =[6.522 6.53];  % basis despiking  012_4  good = 7:72648;    % cut off time jump near beginningend% --- process data ----disp('processing data - might take some time ...')if length(good) > 1  %%TT = interp1(jd(good),TT(good,:), jd(good(1)):1/24/60:jd(good(end)));  %%jd = jd(good(1)):1/24/60:jd(good(end));  TT = TT(good,:);  jd = jd(good,:); end[m,n]    = size(TT);limI     = find(TT>lim(2) | TT<lim(1));TT(limI) = NaN;tm1 = medianmiss(reshape(TT(:,1),6,m/6)); %median sinlge ping hourly valuestm2 = medianmiss(reshape(TT(:,2),6,m/6));tm3 = medianmiss(reshape(TT(:,3),6,m/6));tm4 = medianmiss(reshape(TT(:,4),6,m/6));%%keyboardjd  = jd(3:6:end);tm       = medianmiss([tm1;tm2;tm3;tm4]); %median of 4 ping hourly mediansinan     = find(isnan(tm));tm(inan) = meannan(tm);tmf = auto_filt(tm,sr,co);%%[Pf,F] = spectrum(tmf,3000,0,[],6*24);%%[P,F] = spectrum(tm,3000,0,[],6*24);% --- save data -------eval(['save ',outfile,' tm tmf jd ;'])%----- save data (in rodb)------------cols      = 'YY:MM:DD:HH:P:T:PFIT';fort      = '%4.4d  %2.2d  %2.2d  %7.5f   %8.4f %7.4f %8.4f';time      = gregorian(jd_grid);data      = [time(:,1:3) hms2h(time(:,4:6)) pr_int(:) t_int(:) pfit(:)];rodbsave(outfile,...         'Latitude:Longitude:Columns:Start_Date:Start_Time:SerialNumber:Mooring:WaterDepth:Instrdepth:End_Date:End_Time',...         fort,...         lat,lon,cols,sdate,stime(1:2),serialnumber,mooring,wd,z,edate,etime(1:2),...         data);fclose(fidlog);