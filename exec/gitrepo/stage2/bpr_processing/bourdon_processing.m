% Processing of A.Chave's bourdon type bottom pressure sensors:% steps:%  1) covert data (time, pressure) to  %% T. Kanzowclearsr          = 48;  % samling/interpolation rate [per day]co          = 1/2; % cutoff frequency [per day]co2         = 1/30; % cutoff frequency 2 [per day] cut         = 5;  % cut first 'cut' [days] of pressure record prior to dedrifting                   % where drift is too strong to allow for a good creep fit% ---- Helmuts gauge ------ bpr_id      = 3;  % select 3 or 12 DEPLOY      = 4;  % 2 = 2nd MOVE year, ...coef_guess  = [2 1 .2];%%coef_guess  = [1 1 1]; ticksperday = 98304; ticksperdegree = 4000; disp('loading data...')if bpr_id == 3  pslope  = 1.5948;  % Pascal conversion coeff  for bpr 3  poffset = 3.6343e4;  dpdt    = 0.18;    % [dbar/K] Temperature sensitivity correction of bottom pressure from comparison with PIES  Tcal    = [8.6890  1.8268]; % linear regression coefficient for Temperature [K K/Tunit];  if DEPLOY == 2    load /data0-led/move/atalante02/mooring/v406_2/bpr/helmut_003.dat    start_run   = [2001 01 14 4.24];    launch      = [2001 01 14 8.37];    delay   = 12;    loc     = 'v406_2';    helm    = helmut_003; %%   t_data  = '/data0-led/move/ta/v406_2/microcat/v406_2_018.microcat'; %%   [t_mc,yy,mm,dd,hh]=rodbload(t_data,'t:yy:mm:dd:hh'); %%   jd_mc = julian(yy,mm,dd,hh);   elseif DEPLOY == 3    start_run   = [2002 01 29 10.217];    launch      = [2002 01 29 10.67];    delay   = 8;    loc     = 'v404_3';    load  /data0-led/move/so172/mooring/v404_3/bpr/sio_pies_3.dat    helm    = sio_pies_3;  elseif DEPLOY == 4    load /data0-led/move/me60/mooring/v404_4/bpr/sio_3.dat    start_run   = [2003 06 23 04];    launch      = [2003 06 23 05];    delay   = 8;    loc     = 'v404_4';    helm    = sio_3;  endend  if bpr_id == 12      pslope  = 1.0805;  % Pascal conversion coeff  for bpr 12   poffset = 2.4893e4;   dpdt    = 0.088;    % [dbar/K] Temperature sensitivity correction of bottom pressure from comparison with PIES   Tcal    = [10.2706  2.2885];  % linear regression coefficient for Temperature [K K/Tunit];  if DEPLOY == 2    load //data0-led/move/atalante02/mooring/v404_2/bpr/helmut_012.dat    loc     = 'v404_2';    start_run    = [2001 01 09 20.5];    launch       = [2001 01 10  0.97];    delay   = 12;    helm    = helmut_012;   elseif DEPLOY == 3    start_run   = [2002 02 07 01.85];    launch      = [2002 02 07 04.60];    delay   = 8;    loc     = 'v406_3';    load  /data0-led/move/so172/mooring/v406_3/bpr/sio_pies_12.dat    helm    = sio_pies_12;  endend if bpr_id == 6     load /data0-led/move_kanzow/chave/pn6.dat  pslope  = 1;  % Pascal conversion coeff  for bpr 6   poffset = 0;  loc     = 'pn6';  start_run    = [2000 1 1 0];  launch       = [2000 1 1 5];  delay   = 12;  helm    = pn6;  helm(:,2) = helm(:,2)*1e2;  coef_guess  = [-1 1 .002]; end    disp('done.') jd_start  = julian(start_run) + delay/24; C         = delay - (julian(launch)-julian(start_run)); % time between pressurization and logging time = (helm(:,1)-helm(1,1)) / ticksperday + jd_start; % 2 day time conversion pr   = (helm(:,2) * pslope + poffset)/1e4; % 2 dbar pressure conversion; t    = helm(:,3) / ticksperdegree;  % 2 temp. conversion valid     = find(time - time(1) >   cut);  time      = time(valid); pr        = pr(valid); t         = t(valid);% despike data disp('despiking pressure') [prd,dx,ndx] = ddspike(pr,[-2 2],10,6,'n',-9999,2);disp('despiking temperature') [td,dx,ndx] = ddspike(t,[-2 2],15,3,'n',-9999); % despiking of T is complicated ii = find(diff(dx) == median(diff(dx))); a1 = dx(ii)-2;  a2 = dx(ii)+60; in = igrep(sort([a1' a2']));   in    = in(find(in>0));  td(in)= -9999; %%ti   = find(td>-900);tl   = length(time);for k = 1 :20 tiI = find(diff(time)>2e-4  & diff(time) <1); if length(tiI) - tl >= -1    break end tiI = tiI +1; time = time(tiI); td   = td(tiI); prd  = prd(tiI); tl   = length(time);end log  = time(1); jd_grid = log : 1/sr : time(length(time)); % time grid ti   = find(td>-900);  % interpolate onto time grid and low pass filter pi          = find(prd > -900); pr_int      = interp1(time(pi),prd(pi),jd_grid); if exist('Tcal')    t_int       = Tcal(1) + Tcal(2)* interp1(time(ti),td(ti),jd_grid); else    t_int       = interp1(time(ti),td(ti),jd_grid); end % -------- remove  temperature sensitivity of pressure sensor ------   if exist('Tcal')  % correction of temperature sensitivity  of bottom pressure            disp('!!! correcting temperature sensitivity of bottom pressure!!!')%   t_mc   =  interp1(jd_mc,t_mc,jd_grid);     t_mc   = t_int;   tnnan  = find(~isnan(t_mc));   if tnnan(1) > 1      t_mc(1:tnnan(1)-1) = t_mc(tnnan(1));   end   if tnnan(end) < length(jd_grid)      t_mc(tnnan(end)+1:end) = t_mc(tnnan(end));   end   pr_int =  pr_int - (t_mc - mean(t_mc)) * dpdt; else   disp('!!! no correction of bottom pressure temperature sensitivity applied!!!') end     % -------- apply low pass filter ------pr_filt     = auto_filt(pr_int,sr,co);pr_filt2    = auto_filt(pr_int,sr,co2,'low',4);% -------- eliminate bad data --------------figure(666)plot(pr_int,'.')grid onpnanI = input('insert non-valid pressure measurement limits (in brackets)');if ~isempty(pnanI)  for i = 1 : length(pnanI)/2    ind = [pnanI((i-1)*2+1):pnanI(i*2)];    pr_int(ind)  = interp1(jd_grid([ind(1)-1 ind(end)+1]),...                    pr_int([ind(1)-1 ind(end)+1]),jd_grid(ind));    pr_filt(ind)  = interp1(jd_grid([ind(1)-1 ind(end)+1]),...                     pr_filt([ind(1)-1 ind(end)+1]),jd_grid(ind));    pr_filt2(ind)  = interp1(jd_grid([ind(1)-1 ind(end)+1]),...                     pr_filt2([ind(1)-1 ind(end)+1]),jd_grid(ind));  endendplot(t_int,'.')grid ontnanI = input('insert non-valid temperature measurement limits (in brackets)');if ~isempty(pnanI)  for i = 1 : length(tnanI)/2    ind = [tnanI((i-1)*2+1):tnanI(i*2)];    t_int(ind)  = interp1(jd_grid([ind(1)-1 ind(end)+1]),...                    t_int([ind(1)-1 ind(end)+1]),jd_grid(ind));  endend  % --- fit drift curves --------------------- [fit_coef,pr_fit]    = creep_fit(jd_grid-jd_grid(1),pr_int,cut,coef_guess);[exfit_coef,pr_exfit]  = exp_lin_fit2(jd_grid,pr_int,[1 1 1 1]);% ----if ~isempty(pnanI)   pr_int(igrep(pnanI)) = NaN;  pr_filt(igrep(pnanI)) = NaN;  pr_filt2(igrep(pnanI)) = NaN;endif ~isempty(tnanI)   t_int(igrep(tnanI)) = NaN;end% ----- graphics -------------------- figure(4) hold off plot(jd_grid-jd_grid(1),pr_filt,'b') hold on % plot(jd_grid-jd_grid(1),pr_filt2,'r') plot(jd_grid-jd_grid(1),pr_fit,'r') figure(5) hold off plot(jd_grid-jd_grid(1),t_int,'b')    eval(['save ',loc,'_bourdon.mat jd_grid  pr_int pr_filt pr_fit fit_coef pr_exfit exfit_coef t_int'])   