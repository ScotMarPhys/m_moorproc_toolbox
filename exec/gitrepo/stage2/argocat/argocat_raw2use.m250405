% basic preprocessing for combined argonaut sd / microcat data
%   
% features
%      1. eliminate lauching and recovery period
%      2. save data to rodb file
%      3. create data overview sheet
%
% uses timeaxis.m, auto_filt.m, julian.m 

% 14.04.05 Kanzow 
%
%      
  
% --- get moring information from infofile 

% scu jym: add clear all and close all

clear all
close all

moor          = 'MAR1_1_2004012';    % Mooring name
operator      = 'SCU JYM';

plot_interval = [2004 02 01 00;   % start time of time axis on plot
		 2005 06 01 00];  % end time of time axis on plot

in_code    = [366337] ;         % argocat id

% -- set path for data input and output
% jym 21 April 2005: Must remember to create directory

inpath  = ['/local/users/pstar/data/moor/proc/',moor,'/arg/'];
outpath = ['/local/users/pstar/data/moor/proc/',moor,'/arg/'];


infofile =['/local/users/pstar/data/moor/proc/',moor,'/',moor,'info.dat'];
[id,sn,z,s_t,s_d,e_t,e_d,lat,lon,wd,mr]  =  rodbload(infofile,'instrument:serialnumber:z:Start_Time:Start_Date:End_Time:End_Date:Latitude:Longitude:WaterDepth:Mooring');

ii = find(id == in_code);
sn = sn(ii);
z  = z(ii);
id = id(ii);

%sn = sn(1:2); z = z(1:2); id = id(1:2);

 
[z,zx] = sort(z);  % sort instruments by their depth
sn     = sn(zx);
id     = id(zx);



fid_stat= fopen([outpath,'stage2_log'],'w');
fprintf(fid_stat,'Processing steps taken by argocat_raw2use.m:\n');
fprintf(fid_stat,'  1. eliminate lauching and recovery period\n');

fprintf(fid_stat,'  2. save data to rdb file\n');
fprintf(fid_stat,'\n Operated by:%s on %s\n',operator,datestr(clock)); 
fprintf(fid_stat,['        Argonaut/MicroCATs in Mooring ',moor,'\n\n\n']);

dummy    = -9999;

columns = 'YY:MM:DD:HH:T:TCAT:P:PCAT:C:U:V:W:HDG:PIT:ROL:USD:VSD:WSD:USS:VSS:WSS:HDGSD:PITSD:ROLSD:IPOW';


%-----------------------------------------
% --- preprocessing loop -------------------
% ----------------------------------------

inst = 1;

jd_s  = julian(s_d(1),s_d(2),s_d(3),s_t(1)+s_t(2)/60);  % start time
jd_e  = julian(e_d(1),e_d(2),e_d(3),e_t(1)+e_t(2)/60);  % end time

for proc = 1 : length(sn),
  infile  = [inpath,moor,'_',sprintf('%4.4d',sn(proc)),'.raw'];
  if exist(infile)   > 0 
 
    rodbfile= [moor,'_',sprintf('%3.3d',inst),'.use']; 
    outfile = [outpath,rodbfile];

    inst = inst +1;
    [YY,MM,DD,HH,t,tc,p,pc,c,u,v,w,...
     hdg,pit,rol,usd,vsd,wsd,uss,vss,wss,hdgsd,pitsd,rolsd,ipow] = ...
                  rodbload(infile,columns);

    %------------------------------------------ 
    %----- cut off launching and recovery period
    %------------------------------------------
    disp('cut off launching and recovery period')
 
    jd               = julian(YY,MM,DD,HH);
    ii               = find(jd <= jd_e & jd >= jd_s );

    YY=YY(ii);MM=MM(ii);DD=DD(ii);HH=HH(ii);
    c=c(ii);t=t(ii);tc=tc(ii);p=p(ii);pc=pc(ii);
    u=u(ii);v=v(ii);w=w(ii);

    hdg=hdg(ii);pit=pit(ii);rol=rol(ii);usd=usd(ii);vsd=vsd(ii);wsd=wsd(ii);
    uss=uss(ii);vss=vss(ii);wss=wss(ii);hdgsd=hdgsd(ii);pitsd=pitsd(ii);
    rolsd=rolsd(ii);ipow=ipow(ii);

    jd  = jd(ii); 

    cycles     = length(ii);
    Start_Date = [YY(1) MM(1) DD(1)];
    Start_Time = HH(1);
    End_Date = [YY(cycles) MM(cycles) DD(cycles)];
    End_Time = HH(cycles);     


    %------------------------------------------
    %---- fill time gaps  with dummy
    %------------------------------------------


    disp(' fill time gaps  with dummy')

    djd = diff(jd);           % time step  
    sr  = median(djd);        % sampling interval
    ii  = find(djd > 1.5*sr);  % find gaps
    gap = round(djd(ii)/sr)-1;
    addt= []; 

if 0

    for i = 1 : length(gap), 
      addt = [addt; [[1:gap(i)]*sr + jd(ii(i))]'];
                         
    end 

    [jd,xx] = sort([jd; addt]);   % add time
    ngap    = length(addt);       % number of time gaps         
    gt      = gregorian(jd);
    YY=gt(:,1); MM=gt(:,2); DD=gt(:,3); 
    if size(gt,2) == 6
       HH=hms2h(gt(:,4),gt(:,5),gt(:,6)); 
    else 
       HH= gt(:,4);
    end    
       
   
    t = [t;dummy*ones(ngap,1)]; t = t(xx);
    c = [c;dummy*ones(ngap,1)]; c = c(xx); 
    if length(P) > 1
       p = [p;dummy*ones(ngap,1)]; p = p(xx); 
    end

end % if 0

    %-----------------------------------------------------
    %  write output to logfile ---------------------------
    %-----------------------------------------------------

% 
if 0

    disp(' write output to logfile')


    fprintf(fid_stat,'T   %5.5d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d         %d   %5.2f   %5.2f   %5.2f   %5.2f \n',...
               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,tm,tsd,tmx,tmn'); 

    fprintf(fid_stat,'C   %5.5d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d   %d         %d   %5.2f   %5.2f   %5.2f   %5.2f \n',...
               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,cm,csd,cmx,cmn'); 

    if length(P) > 1
      fprintf(fid_stat,'P   %5.5d  %4.4d  %2.2d/%2.2d/%2.2d   %2.2d/%2.2d/%2.2d  %d        %d    %5.1f   %5.2f   %5.2f   %5.2f \n',...
               sn(proc),z(proc),Start_Date,End_Date,cycles,ngap,pm,psd,pmx,pmn');  
    end

end % if 0

    fprintf(fid_stat,'\n');

    %-----------------------------------  
    %--- write data to rodb format -----
    %-----------------------------------

    disp(['writing data to ',outfile]) 
         
    
     
 %%     fort = '%4.4d   %2.2d   %2.2d   %8.5f   %6.4f   %6.4f  %5.1f';
    fort =['%4.4d %2.2d %2.2d  %6.4f    %7.4f %7.4f %6.2f %6.2f %7.4f  ',...
          ' %6.2f %6.2f %6.2f   %4.1f %4.1f %4.1f   %6.2f %6.2f %6.2f  ',...
          ' %3.3d %3.3d %3.3d   %4.1f %4.1f %4.1f   %4.2f'];

      
      rodbsave(outfile,...
          'Latitude:Longitude:Columns:Start_Date:Start_Time:SerialNumber:Mooring:WaterDepth:Instrdepth:End_Date:End_Time',...
           fort,...
          lat,lat,columns,Start_Date,Start_Time,sn(proc),mr,wd,z(proc),End_Date,End_Time,...
         [ YY,MM,DD,HH,t,tc,p,pc,c,u,v,w,...
     hdg,pit,rol,usd,vsd,wsd,uss,vss,wss,hdgsd,pitsd,rolsd,ipow]);
    end

  %%%%%%%%%% Graphics %%%%%%%%%%%%%%%%

  jd0 = julian(-1,1,1,24);
  jd1 = julian(plot_interval(1,:))-jd0;
  jd2 = julian(plot_interval(2,:))-jd0; 

   figure(1);clf
     subplot(5,1,1); ii = find(~isnan(t)&t>dummy);
         
       plot(jd(ii)-jd0,t(ii))
       hold on;
       ii = find(~isnan(tc)&tc>dummy&tc~=0);
       plot(jd(ii)-jd0,tc(ii),'r')
         title(['ArgoCAT s/n: ',num2str(sn(proc)), ...
               '; Target Depth: ',num2str(z(proc))])
         ylabel('Temperature [deg C]')
         grid on
          xlim([jd1 jd2])
         datetick('x',12)
       drawnow
       pos = get(gca,'Position');  
	set(gca,'position',pos)
 
    subplot(5,1,2); ii = find(~isnan(c)&c>dummy&c~=0);

plot(jd(ii)-jd0,c(ii),'r')
       ylabel('Conductivity [mS/cm]')
       grid on
       xlim([jd1 jd2])
       datetick('x',12)

    subplot(5,1,3); ii = find(~isnan(p)&p>dummy&pc~=0);

          plot(jd(ii)-jd0,p(ii))
          hold on
          plot(jd(ii)-jd0,pc(ii),'r')
          ylabel('Pressure [dbar]')
          grid on 
           xlim([jd1 jd2])
          datetick('x',12)

    subplot(5,1,4); ii = find(~isnan(u)&u>dummy);

      plot(jd(ii)-jd0,u(ii))
          ylabel('zonal velocity [cm/s]')
          xlim([jd1 jd2])
          grid on
         datetick('x',12)

      
    subplot(5,1,5); ii = find(~isnan(v)&v>dummy);

         plot(jd(ii)-jd0,v(ii))
         ylabel('merid. velocity [cm/s]')
         grid on 
         xlim([jd1 jd2])
         datetick('x',12)


  orient tall


      eval(['print -depsc ',outfile,'.1.eps']) 

  sampling_rate = 1/median(diff(jd));
  tf            = auto_filt(t, sampling_rate, 1/2,'low',4);
  cf            = auto_filt(c, sampling_rate, 1/2,'low',4);
  pf            = auto_filt(p, sampling_rate, 1/2,'low',4);
  tcf            = auto_filt(tc, sampling_rate, 1/2,'low',4);
  pcf            = auto_filt(pc, sampling_rate, 1/2,'low',4);
  uf            = auto_filt(u, sampling_rate, 1/2,'low',4);
  vf            = auto_filt(v, sampling_rate, 1/2,'low',4);


   figure(2);clf
     subplot(5,1,1);
         
       plot(jd-jd0,tf)
       hold on;
         plot(jd-jd0,tcf,'r')
         title(['ArgoCAT s/n: ',num2str(sn(proc)), ...
               '; Target Depth: ',num2str(z(proc))])
         ylabel('Temperature [deg C]')
         grid on
          xlim([jd1 jd2])
         datetick('x',12)
       drawnow
       pos = get(gca,'Position');  
	set(gca,'position',pos)
 
    subplot(5,1,2); 

       plot(jd-jd0,cf,'r')
       ylabel('Conductivity [mS/cm]')
       grid on
       xlim([jd1 jd2])
       datetick('x',12)

    subplot(5,1,3); 

          plot(jd-jd0,pf)
          hold on
          plot(jd-jd0,pcf,'r')
          ylabel('Pressure [dbar]')
          grid on 
           xlim([jd1 jd2])
          datetick('x',12)

    subplot(5,1,4); 

      plot(jd-jd0,uf)
          ylabel('zonal velocity [cm/s]')
          xlim([jd1 jd2])
          grid on
         datetick('x',12)

      
    subplot(5,1,5);

         plot(jd-jd0,vf)
         ylabel('merid. velocity [cm/s]')
         grid on 
         xlim([jd1 jd2])
         datetick('x',12)


  orient tall


      eval(['print -depsc ',outfile,'.2.eps']) 
  

  end

 


%end
       
  
